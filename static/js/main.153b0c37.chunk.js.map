{"version":3,"sources":["Cell.tsx","NumberPad.tsx","logic.ts","Grid.tsx","games.ts","NewGamePanel.tsx","GameSettingsPanel.tsx","History.tsx","App.tsx","index.tsx"],"names":["Cell","props","row","column","value","isGiven","canBeSolved","isIncorrect","handleClick","handleKeyDown","inputAttrs","disabled","cellDivClassName","candidates","map","i","Array","isArray","includes","id","className","type","maxLength","pattern","inputMode","onChange","onClick","e","onKeyDown","NumberPad","cellClicked","handleNumberPadButtonClick","hideNumberPad","isNumberPadActive","useState","top","bottom","left","right","numberPadStyle","setNumberPadStyle","activeCell","parentElement","numberPadRef","useRef","useEffect","grid","document","getElementById","numberPadDiv","current","buttonTarget","target","contains","handleEscapeKey","key","numberPad","gridTop","getBoundingClientRect","x","y","width","height","body","scrollTop","numberPadBottom","offsetHeight","offsetTop","numberPadWidth","offsetWidth","numberPadLeft","offsetLeft","numberPadRight","windowHeight","documentElement","clientHeight","windowWidth","clientWidth","positionStyles","getNumberPadPosition","addEventListener","removeEventListener","style","ref","numberButtons","push","createNumberButtons","querySelector","clearButton","classList","solveButton","getGridNextAnswers","solvedCells","forEach","j","isCellSolved","cell","getCandidates","newCandidates","length","rowArrayValues","getRowValues","filter","index","columnArrayValues","getColumnValues","candidate","some","arrayValue","from","Set","solveCell","undefined","setCandidates","updateGrid","solveCells","col","crosshatchNonet","solveNonets","gridClone","_","cloneDeep","xWings","examineUnit","unitValues","unitIndex","mainAxis","candidatesExamined","unitResults","cellValue","cellIndex","candidateValue","count","candidatePositions","cellValueForComparison","cellIndexForComparison","candidateCellPair","findOtherCandidatePair","unit","candidatePairUnitIndex","positions","cellACrossAxisIndex","cellBCrossAxisIndex","cellAValue","cellBValue","newCandidatePositions","fourPositionsOfCandidate","concat","axis","columnValues","findXWings","results","xWing","xWingRows","position","rowPosition","indexOf","xWingColumns","columnPosition","xWingRow","candidatesToRemove","removeCandidateFromCell","xWingColumn","reduceCandidatesXWing","rowValues","rowIndex","removeNakeds3","removeNakedsFromUnit","findNakeds","removeNakeds4","updatedCell","columnIndex","nonetValues","getNonetValues","removeNakeds","reducedCandidatesRow","reduceCandidates","reducedCandidatesColumn","initReduceCandidates","updatedCells","updatedGrid","generateNonet","topLeftCellRow","topLeftCellCol","nonet","getNonetRowsCols","rowOrCol","rowOrCol1","rowOrCol2","rowOrCol3","nonetRows","nonetColumns","temporaryNonetValues","nonetRowValues","nonetColumnValues","emptyCount","gridCell","nonetValuesArrayIndexToGridCell","nonetValuesIndex","nonetTopLeftSqRow","nonetTopLeftSqCol","gridCellRow","gridCellCol","startingCandidates","allValues","quantity","tempUnitValues","slice","cellsWithSameCandidates","result","findNakedsStep","arrayOfValues","cellsWithCandidates","lastGoodValue","cellsToExcludeCount","reduce","accumulator","currentValue","combined","shift","nakeds","unitIndexes","unitType","differentCandidates","isEqual","getCellValue","direction","nonetMainAxisSets","allCandidatesInCrossAxisSets","nonetMainAxisSet","allCandidatesInMainAxisSet","otherMainAxisSet1","otherMainAxisSet2","gridMainAxisSetIndex","gridMainAxisSetValues","indexesToInclude","allCandidatesUniqueToMainAxisSet","gridCrossAxisSetIndex","verifyCompletedGrid","gridColumns","gridNonets","allRowsIncludeAllValues","every","allColumnsIncludeAllValues","allNonetsIncludeAllValues","Grid","currentGridValues","pastGridValues","completedGrid","updateGame","givens","nextPossibleAnswers","showCandidates","highlightGivens","highlightSolvableCells","highlightIncorrectCells","isInGameMode","setCellClicked","setActiveCell","setIsNumberPadActive","showNumberPad","handleCellClick","coords","select","newGridValues","RegExp","test","Number","preventDefault","isCorrect","renderCell","isInteger","gridClassName","createGrid","targetButton","games","getRandomInt","max","Math","floor","random","NewGamePanel","difficultyLevel","setDifficultyLevel","createNewGame","createCustomGame","toggleMenu","htmlFor","easy","medium","hard","expert","GameSettingsPanel","setShowCandidates","setHighlightGivens","setHighlightSolvableCells","setHighlightIncorrectCells","name","checked","History","currentStep","historyLength","history","previousButtonAttrs","jumpToStepInHistory","nextButtonAttrs","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","App","historyJson","localStorage","getItem","JSON","parse","setHistory","stepNumberJson","stepNumber","setStepNumber","showCandidatesJson","highlightGivensJson","highlightSolvableCellsJson","highlightIncorrectCellsJson","setIsInGameMode","menuIsOpen","setMenuIsOpen","currentGrid","prevHistory","nextGridValues","solveGridSteps","solveGrid","console","log","getGridAnswers","checkCompletedGridMemoizedCallback","useCallback","flat","isGridFull","alert","newHistory","initialGrid","setItem","stringify","Dropdown","show","Toggle","variant","Menu","Divider","step","ReactDOM","render","StrictMode"],"mappings":"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AAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IACvO,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,MAE3O,KAAQ,CACJ,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAC1O,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,KACzO,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,KACzO,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,KACzO,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,KACxO,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,KACxO,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,KACvO,CAAC,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,IAC1O,CAAC,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,KACrO,CAAC,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,KAEvO,OAAU,CACN,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,KACzO,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,KACzO,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,KAC1O,CAAC,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,KAC1O,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,KAC1O,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,KACzO,CAAC,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IACzO,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,IACxO,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,KACnO,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,KACvO,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,KAC3O,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAC5O,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EA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","file":"static/js/main.153b0c37.chunk.js","sourcesContent":["interface CellProps {\n    row: number;\n    column: number;\n    value: number | number[];\n    isGiven: boolean;\n    canBeSolved: boolean;\n    isIncorrect: boolean;\n    handleClick: (coords: number[], e: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\n    handleKeyDown: (coords: number[], e: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nfunction Cell(props: CellProps) {\n\n    interface InputAttrsObj {\n        value: number | [];\n        disabled: boolean;\n    }\n\n    const {row, column, value, isGiven, canBeSolved, isIncorrect, handleClick, handleKeyDown} = props;\n    const inputAttrs: InputAttrsObj = { value: [], disabled: false };\n    const cellDivClassName = `cell cell-row-${row} cell-column-${column}${ isGiven === true ? ' given' : '' }${ canBeSolved === true ? ' can-be-solved' : '' }${ isIncorrect === true ? ' incorrect' : '' }`;\n\n    // set 'value' attribute for cell input\n    if (typeof value === 'number') {\n        inputAttrs.value = value;\n    }\n\n    // set 'disabled' attribute for cell input, if a 'given' number\n    if (isGiven === true) {\n        inputAttrs.disabled = true;\n    }\n\n    const candidates = [1,2,3,4,5,6,7,8,9].map(function(i) {\n        if (Array.isArray(value) && value.includes(i)) {\n            return <div key={`r${row}c${column}-p${i}`}>{i}</div>\n        } else {\n            return <div key={`r${row}c${column}-p${i}`}></div>\n        }\n    });\n\n    return (\n        <div id={`r${row}c${column}`} className={cellDivClassName}>\n            <input\n                type=\"text\"\n                maxLength={1}\n                pattern=\"[1-9]\"\n                inputMode=\"none\"\n                onChange={() => { /* do nothing */ }}\n                onClick={(e) => handleClick([row, column], e)}\n                onKeyDown={(e) => handleKeyDown([row, column], e)}\n                {...inputAttrs}\n            />\n            {Array.isArray(value) && <div className=\"candidates\">{candidates}</div>}\n        </div>\n    );\n}\n\nexport default Cell;","import { useState, useEffect, useRef } from 'react';\nimport './NumberPad.css';\n\ninterface PositionStylesObj {\n    top: number | string;\n    bottom: number | string;\n    left: number | string;\n    right: number | string;\n}\n\nfunction getNumberPadPosition(activeCell: HTMLDivElement, numberPad: HTMLDivElement): PositionStylesObj {\n    const grid = document.getElementById('grid')!;\n    const gridRect = grid !== null ? grid.getBoundingClientRect() : {x: 0, y: 0, width: 454, height: 454, top: 0, bottom: 454, left:0, right: 454};\n    const gridTop = gridRect.top + document.body.scrollTop;\n    const cellBottom = activeCell.offsetHeight + activeCell.offsetTop + gridTop;\n    const numberPadBottom = cellBottom + numberPad.offsetHeight;\n    const numberPadWidth = numberPad.offsetWidth;\n    const numberPadLeft = activeCell.offsetLeft + (activeCell.offsetWidth/2) - numberPadWidth/2;\n    const numberPadRight = numberPadLeft + numberPadWidth;\n    const windowHeight = document.documentElement.clientHeight;\n    const windowWidth = document.documentElement.clientWidth;\n\n    const positionStyles: PositionStylesObj = {\n        top: activeCell ? activeCell.offsetTop + activeCell.offsetHeight : 0,\n        bottom: 'auto',\n        left: activeCell ? activeCell.offsetLeft + (activeCell.offsetWidth/2) - numberPadWidth/2 : 0,\n        right: 'auto'\n    };\n\n    if (numberPadBottom > windowHeight) {\n        // bottom of number pad would go offscreen bottom\n        positionStyles.top = 'auto';\n        positionStyles.bottom = grid.offsetHeight - activeCell.offsetTop;\n    }\n\n    if (numberPadLeft < 0) {\n        // left of number pad would go offscreen left\n        positionStyles.left = 0;\n    }\n\n    if (numberPadRight > windowWidth) {\n        // right of number pad would go offscreen right\n        positionStyles.left = 'auto';\n        positionStyles.right = 0;\n    }\n\n    return positionStyles;\n    \n}\n\ninterface NumberPadProps {\n    cellClicked: HTMLInputElement | null;\n    handleNumberPadButtonClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    hideNumberPad: () => void;\n    isNumberPadActive: boolean;\n}\n\nconst NumberPad = (props: NumberPadProps) => {\n\n    const {cellClicked, handleNumberPadButtonClick, hideNumberPad, isNumberPadActive} = props;\n\n    const [numberPadStyle, setNumberPadStyle] = useState<PositionStylesObj>({\n        top: '-9999px',\n        bottom: 'auto',\n        left: '-9999px',\n        right:'auto'\n    });\n\n    const activeCell: HTMLDivElement | null = cellClicked ? cellClicked.parentElement as HTMLDivElement : null;\n    const numberPadRef = useRef<HTMLDivElement | null>(null);\n\n    useEffect(() => {\n\n        const grid = document.getElementById('grid')!;\n        const numberPadDiv = numberPadRef.current as HTMLDivElement;\n\n        const handleClick = (e: MouseEvent) => {\n            const buttonTarget = e.target as HTMLButtonElement;\n            if (numberPadDiv.contains(buttonTarget) || grid.contains(buttonTarget)) {\n                // inside click\n                return;\n            }\n            // outside click\n            hideNumberPad();\n        };\n        const handleEscapeKey = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                hideNumberPad();\n            }\n        };\n\n        if (isNumberPadActive && activeCell !== null) {\n            setNumberPadStyle(getNumberPadPosition(activeCell, numberPadDiv));\n        } else {\n            setNumberPadStyle({\n                top: '-9999px',\n                bottom: 'auto',\n                left: '-9999px',\n                right:'auto'\n            });\n        }\n\n        // add event listener for outside click when mounted\n        document.addEventListener('mousedown', handleClick);\n        document.addEventListener('keyup', handleEscapeKey);\n\n        // return functions to be called when unmounted\n        return () => {\n            document.removeEventListener('mousedown', handleClick);\n            document.removeEventListener('keyup', handleEscapeKey);\n        };\n\n    }, [isNumberPadActive, hideNumberPad, activeCell]);\n\n    function createNumberButtons() {\n        const numberButtons = [];\n    \n        for (let i = 1; i < 10; i++) {\n            numberButtons.push(<button type=\"button\" value={i} key={`numpad-${i}`} onClick={handleNumberPadButtonClick}>{i}</button>);\n        }\n    \n        return numberButtons;\n    }\n\n    function clearButton() {\n        if (activeCell !== null) {\n            const activeCellInput = activeCell.querySelector('input')!;\n            if (activeCellInput.value !== '') {\n                return (\n                    <button\n                        type=\"button\"\n                        value=\"\"\n                        className=\"clear-button\"\n                        onClick={handleNumberPadButtonClick}\n                    >Clear</button>\n                );\n            }\n        }\n    }\n\n    function solveButton() {\n        if (activeCell !== null && activeCell.classList.contains('can-be-solved')) {\n            return (\n                <button\n                    type=\"button\"\n                    value=\"\"\n                    className=\"solve-button\"\n                    onClick={handleNumberPadButtonClick}\n                >Solve</button>\n            );\n        }\n    }\n        \n    return (\n        <div\n            className={isNumberPadActive ? 'number-pad active' : 'number-pad'}\n            style={numberPadStyle}\n            ref={numberPadRef}\n        >\n            {createNumberButtons()}\n            {clearButton()}\n            {solveButton()}\n        </div>\n    );\n\n};\n\nexport default NumberPad;","import _ from 'lodash';\n\ntype UnitArr = (number | number[])[];\ntype GridArr = UnitArr[];\ntype UnitTypes = 'row' | 'column' | 'nonet';\ntype CellCoords = [number, number];\n\ninterface CellObj {\n    row: number;\n    column: number;\n    value: number | number[];\n}\n\ninterface XWingObj {\n    axis: 'row' | 'column';\n    positions: CellCoords[];\n    value: number\n}\n\nfunction getDiffOfCompletedCells(currentGrid: GridArr, nextGrid: GridArr) {\n    const result = nextGrid.map(function(row, i) {\n        const rowValues = row.map(function(value, j) {\n            if (Number.isInteger(value) && currentGrid[i][j] !== value) {\n                return value;\n            } else {\n                return [];\n            }\n        });\n        return rowValues;\n    });\n    return result;\n}\n\nfunction getGridNextAnswers(grid: GridArr) {\n    return solveCells(solveNonets(reduceCandidatesXWing(removeNakeds(initReduceCandidates(grid)))));\n}\n\nfunction getGridAnswers(grid: GridArr) {\n    let completedGrid: GridArr = [];\n    let solveGridSteps = 0;\n\n    function solveGrid(grid: GridArr) {\n        solveGridSteps++;\n        if (verifyCompletedGrid(grid) === true) {\n            return;\n        } else if (solveGridSteps > 81) {\n            console.log('Cannot solve sudoku puzzle');\n            return;\n        } else {\n            completedGrid = getGridNextAnswers(grid);\n            solveGrid(completedGrid);\n        }\n    }\n    solveGrid(grid);\n    return completedGrid;\n}\n\nfunction updateGrid(grid: GridArr, updatedCells: CellObj[]) {\n    const updatedGrid = _.cloneDeep(grid);\n    updatedCells.forEach(function(cell: CellObj) {\n        updatedGrid[cell.row][cell.column] = cell.value;\n    });\n    return updatedGrid;\n}\n\nfunction generateNonet(grid: GridArr, topLeftCellRow: number, topLeftCellCol: number) {\n    let nonet: UnitArr = [];\n\n    for (let i = topLeftCellRow; i < topLeftCellRow + 3; i++) {\n        for (let j = topLeftCellCol; j < topLeftCellCol + 3; j++) {\n            nonet.push(grid[i][j]);\n        }\n    }\n\n    return nonet;\n}\n\nfunction getCellValue(grid: GridArr, row: number, column: number) {\n    return grid[row][column];\n}\n\nfunction getRowValues(grid: GridArr, row: number) {\n    let rowValues: UnitArr = [];\n    grid[row].forEach(function(value) {\n        rowValues.push(value);\n    });\n    return rowValues;\n}\n\nfunction getColumnValues(grid: GridArr, column: number) {\n    let columnValues: UnitArr = [];\n    grid.forEach(function(row) {\n        columnValues.push(row[column]);\n    });\n    return columnValues;\n}\n\nfunction getNonetValues(grid: GridArr, row: number, column: number) {\n\n    // sqr1\n    if (row <= 2 && column <= 2) {\n        return generateNonet(grid, 0,0);\n    }\n\n    // sqr2\n    if (row <= 2 && (column >= 3 && column <= 5)) {\n        return generateNonet(grid, 0,3);\n    }\n\n    // sqr3\n    if (row <= 2 && column >= 6) {\n        return generateNonet(grid, 0,6);\n    }\n\n    // sqr4\n    if ((row >= 3 && row <= 5) && column <= 2) {\n        return generateNonet(grid, 3,0);\n    }\n\n    // sqr5\n    if ((row >= 3 && row <= 5) && (column >= 3 && column <= 5)) {\n        return generateNonet(grid, 3,3);\n    }\n\n    // sqr6\n    if ((row >= 3 && row <= 5) && column >= 6) {\n        return generateNonet(grid, 3,6);\n    }\n\n    // sqr7\n    if (row >= 6 && column <= 2) {\n        return generateNonet(grid, 6,0);\n    }\n\n    // sqr8\n    if (row >= 6 && (column >= 3 && column <= 5)) {\n        return generateNonet(grid, 6,3);\n    }\n\n    // sqr9\n    // row >= 6 && column >= 6\n    return generateNonet(grid, 6,6);\n\n}\n\nfunction getNonetRowsCols(rowOrCol: number) {\n\n    // rowOrCol === 0 || rowOrCol === 3 || rowOrCol === 6\n    let rowOrCol1 = rowOrCol,\n        rowOrCol2 = rowOrCol + 1,\n        rowOrCol3 = rowOrCol + 2;\n\n    if (rowOrCol === 1 || rowOrCol === 4 || rowOrCol === 7) {\n        rowOrCol1 = rowOrCol - 1;\n        rowOrCol2 = rowOrCol;\n        rowOrCol3 = rowOrCol + 1;\n    }\n    if (rowOrCol === 2 || rowOrCol === 5 || rowOrCol === 8) {\n        rowOrCol1 = rowOrCol - 2;\n        rowOrCol2 = rowOrCol - 1;\n        rowOrCol3 = rowOrCol;\n    }\n\n    return [rowOrCol1, rowOrCol2, rowOrCol3];\n}\n\nfunction isCellSolved (grid: GridArr, row: number, column: number) {\n    if (typeof grid[row][column] === 'number') {\n        return true;\n    }\n}\n\nfunction isCleanValue(value: number | number[]) {\n    // check if the value is an empty array\n    if (Array.isArray(value) && value.length === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction crosshatchNonet (grid: GridArr, row: number, column: number) {\n\n    const nonetValues = getNonetValues(grid, row, column);\n    const candidates = [1,2,3,4,5,6,7,8,9].filter(function(value) {\n        return !(nonetValues.includes(value));\n    });\n    let newCandidates: number[][] = [];\n    const nonetRows = getNonetRowsCols(row);\n    const nonetColumns = getNonetRowsCols(column);\n\n    candidates.forEach(function(candidate) {\n\n        const temporaryNonetValues: (number | 'o' | 'x')[] = nonetValues.map(function(value) {\n            if (Array.isArray(value)) {\n                return \"o\";\n            } else {\n                return value;\n            }\n        });\n\n        temporaryNonetValues.forEach(function(value, index) {\n            let nonetRowValues;\n            let nonetColumnValues;\n\n            if (index <= 2) {\n                nonetRowValues = getRowValues(grid, nonetRows[0]);\n            }\n            if (index >=3 && index <=5) {\n                nonetRowValues = getRowValues(grid, nonetRows[1]);\n            }\n            // index >= 6\n            nonetRowValues = getRowValues(grid, nonetRows[2]);\n\n            if (index === 0 || index === 3 || index === 6) {\n                nonetColumnValues = getColumnValues(grid, nonetColumns[0]);\n            }\n            if (index === 1 || index === 4 || index === 7) {\n                nonetColumnValues = getColumnValues(grid, nonetColumns[1]);\n            }\n            // index === 2 || index === 5 || index === 8\n            nonetColumnValues = getColumnValues(grid, nonetColumns[2]);\n            \n\n            if (value === 'o') {\n                if (nonetRowValues.includes(candidate)) {\n                    temporaryNonetValues[index] = 'x';\n                }\n                if (nonetColumnValues.includes(candidate)) {\n                    temporaryNonetValues[index] = 'x';\n                }\n            }\n\n        });\n\n        let emptyCount = 0;\n\n        temporaryNonetValues.forEach(function(value) {\n            if (value === 'o') {\n                emptyCount++;\n            }\n        });\n\n        const gridCell: CellCoords = nonetValuesArrayIndexToGridCell(temporaryNonetValues.indexOf('o'), row, column);\n\n        if (emptyCount === 1) {\n            newCandidates.push([gridCell[0], gridCell[1], candidate]);\n        }\n        \n    });\n\n    if (newCandidates.length === 1) {\n        return {\n            row: newCandidates[0][0],\n            column: newCandidates[0][1],\n            value: newCandidates[0][2]\n        };\n    } \n\n}\n\nfunction nonetValuesArrayIndexToGridCell(nonetValuesIndex: number, nonetTopLeftSqRow: number, nonetTopLeftSqCol: number): CellCoords {\n    let gridCellRow = nonetTopLeftSqRow;\n    let gridCellCol = nonetTopLeftSqCol;\n\n    if (nonetValuesIndex === 1) {\n        gridCellCol = nonetTopLeftSqCol + 1;\n    }\n    if (nonetValuesIndex === 2) {\n        gridCellCol = nonetTopLeftSqCol + 2;\n    }\n    if (nonetValuesIndex === 3) {\n        gridCellRow = nonetTopLeftSqRow + 1;\n    }\n    if (nonetValuesIndex === 4) {\n        gridCellRow = nonetTopLeftSqRow + 1;\n        gridCellCol = nonetTopLeftSqCol + 1;\n    }\n    if (nonetValuesIndex === 5) {\n        gridCellRow = nonetTopLeftSqRow + 1;\n        gridCellCol = nonetTopLeftSqCol + 2;\n    }\n    if (nonetValuesIndex === 6) {\n        gridCellRow = nonetTopLeftSqRow + 2;\n    }\n    if (nonetValuesIndex === 7) {\n        gridCellRow = nonetTopLeftSqRow + 2;\n        gridCellCol = nonetTopLeftSqCol + 1;\n    }\n    if (nonetValuesIndex === 8) {\n        gridCellRow = nonetTopLeftSqRow + 2;\n        gridCellCol = nonetTopLeftSqCol + 2;\n    }\n\n    return [gridCellRow, gridCellCol];\n}\n\nfunction solveNonets(grid: GridArr) {\n    const solvedCells = [];\n    for (let row = 0; row <= 6; row = row + 3) {\n        for (let col = 0; col <= 6; col = col + 3) {\n            const cell = crosshatchNonet(grid, row, col);\n            if (cell !== undefined) {\n                solvedCells.push(cell);\n            }\n        }\n    }\n    const updatedGrid = updateGrid(grid, solvedCells);\n\n    return setCandidates(updatedGrid);\n}\n\nfunction getCandidates(grid: GridArr, row: number, column: number) {\n\n    const allValues = Array.from(new Set(getNonetValues(grid, row, column).concat(getRowValues(grid, row)).concat(getColumnValues(grid, column)))).filter(function(value) {\n        return typeof value === 'number' || (Array.isArray(value) && value.length !== 0);\n    });\n\n    let startingCandidates: number | number[];\n\n    if (isCleanValue(grid[row][column])) {\n        startingCandidates = [1,2,3,4,5,6,7,8,9];\n    } else {\n        startingCandidates = grid[row][column];\n    }\n    \n    let candidates: number | number[];\n\n    if (Array.isArray(startingCandidates)) {\n        candidates = startingCandidates.filter(function(value) {\n            return !(allValues.includes(value));\n        })\n    } else {\n        candidates = startingCandidates;\n    }\n\n    return candidates;\n\n}\n\n/*\nnaked triple\nthree cells in a block, row, or column having only the same three candidates, or their subset\nall other appearances of the same candidates can be eliminated if they are in the same block, row, or column\n[[6,8], [4,6], [4,8], ...cells w/candidates...]\n\nnaked quad\nfour cells in a block, row, or column having only the same four candidates, or their subset\nall other appearances of the same candidates can be eliminated if they are in the same block, row, or column\n[[2,8], [6,8], [2,6,8,9], [6,8,9], ...cells w/candidates...]\n\n*/\n\nfunction findNakeds(quantity: number, unitValues: UnitArr) {\n\n    let tempUnitValues: UnitArr = unitValues.slice(0);\n    let cellsWithSameCandidates = 0;\n    let result: number[] = [];\n\n    function findNakedsStep(arrayOfValues: UnitArr) {\n\n        const cellsWithCandidates = arrayOfValues.filter(function(value) {\n            return Array.isArray(value);\n        });\n        let lastGoodValue: number[] = [];\n        let cellsToExcludeCount = 0;\n        cellsWithSameCandidates = 0;\n\n        result = arrayOfValues.reduce(function(accumulator: number[], currentValue) {\n\n            if (Array.isArray(currentValue)) {\n\n                const combined = Array.from(new Set(accumulator.concat(currentValue)));\n\n                if (combined.length > quantity) {\n                    cellsToExcludeCount++;\n                    cellsWithSameCandidates = cellsWithCandidates.length - cellsToExcludeCount;\n                    return lastGoodValue;\n                } else {\n                    cellsWithSameCandidates = cellsWithCandidates.length - cellsToExcludeCount;\n                    lastGoodValue = combined;\n                    return combined;\n                }\n\n            } else {\n                return accumulator;\n            }\n\n        }, []);\n\n    }\n\n    while (tempUnitValues.length > 0) {\n        if (cellsWithSameCandidates === quantity && result.length === quantity) {\n            return result;\n        } else {\n            findNakedsStep(tempUnitValues);\n            tempUnitValues.shift();\n        }\n    }\n\n}\n\n//findNakeds(3, rowValues), rowValues, { 'row': rowIndex }, 'row'\n//findNakeds(4, columnValues), columnValues, { 'column': columnIndex }, 'column'\n//findNakeds(3, nonetValues), nonetValues, { 'row': rowIndex,'column': columnIndex }, 'nonet'\n\ninterface UnitIndexesObj {\n    row?: number;\n    column?: number;\n}\n\nfunction removeNakedsFromUnit(nakeds: number[] | undefined, unitValues: UnitArr, unitIndexes: UnitIndexesObj, unitType: UnitTypes) {\n\n    const results: CellObj[] = [];\n\n    if (nakeds) {\n        unitValues.forEach(function(cellValue: number | number[], index: number) {\n            if (Array.isArray(cellValue)) {\n                const differentCandidates = cellValue.filter(function(value) {\n                    return !nakeds.includes(value);\n                });\n                //differentCandidates.filter(candidate => nakeds.includes(candidate));\n                if (differentCandidates.length !== 0 && !_.isEqual(differentCandidates, cellValue)) {\n                    if (unitType === 'row') {\n                        results.push({\n                            row: unitIndexes.row as number,\n                            column: index,\n                            value: differentCandidates\n                        });\n                    }\n                    if (unitType === 'column') {\n                        results.push({\n                            row: index,\n                            column: unitIndexes.column as number,\n                            value: differentCandidates\n                        });\n                    }\n                    if (unitType === 'nonet') {\n                        const gridCell = nonetValuesArrayIndexToGridCell(index, unitIndexes.row as number, unitIndexes.column as number);\n                        results.push({\n                            row: gridCell[0],\n                            column: gridCell[1],\n                            value: differentCandidates\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    if (results.length !== 0) {\n        return results;\n    }\n\n}\n\nfunction removeNakeds(grid: GridArr) {\n\n    const results = [];\n    const gridClone = _.cloneDeep(grid);\n\n    gridClone.forEach(function(rowValues, rowIndex) {\n        const removeNakeds3 = removeNakedsFromUnit(findNakeds(3, rowValues), rowValues, { 'row': rowIndex }, 'row');\n        const removeNakeds4 = removeNakedsFromUnit(findNakeds(4, rowValues), rowValues, { 'row': rowIndex }, 'row');\n\n        if (removeNakeds3 !== undefined) {\n            results.push(...removeNakeds3);\n            removeNakeds3.forEach(function(updatedCell: CellObj) {\n                gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n            });\n        }\n        if (removeNakeds4 !== undefined) {\n            results.push(...removeNakeds4);\n            removeNakeds4.forEach(function(updatedCell: CellObj) {\n                gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n            });\n        }\n\n    });\n\n    gridClone[0].forEach(function(column, columnIndex) {\n        const columnValues = getColumnValues(gridClone, columnIndex);\n        const removeNakeds3 = removeNakedsFromUnit(findNakeds(3, columnValues), columnValues, { 'column': columnIndex }, 'column');\n        const removeNakeds4 = removeNakedsFromUnit(findNakeds(4, columnValues), columnValues, { 'column': columnIndex }, 'column');\n\n        if (removeNakeds3 !== undefined) {\n            results.push(...removeNakeds3);\n            removeNakeds3.forEach(function(updatedCell: CellObj) {\n                gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n            });\n        }\n        if (removeNakeds4 !== undefined) {\n            results.push(...removeNakeds4);\n            removeNakeds4.forEach(function(updatedCell: CellObj) {\n                gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n            });\n        }\n    });\n\n    for (let rowIndex = 0; rowIndex <= 6; rowIndex = rowIndex + 3) {\n        for (let columnIndex = 0; columnIndex <= 6; columnIndex = columnIndex + 3) {\n            const nonetValues = getNonetValues(gridClone, rowIndex, columnIndex);\n            const removeNakeds3 = removeNakedsFromUnit(findNakeds(3, nonetValues), nonetValues, { 'row': rowIndex,'column': columnIndex }, 'nonet');\n            const removeNakeds4 = removeNakedsFromUnit(findNakeds(4, nonetValues), nonetValues, { 'row': rowIndex, 'column': columnIndex }, 'nonet');\n\n            if (removeNakeds3 !== undefined) {\n                results.push(...removeNakeds3);\n                removeNakeds3.forEach(function(updatedCell) {\n                    gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n                });\n            }\n            if (removeNakeds4 !== undefined) {\n                results.push(...removeNakeds4);\n                removeNakeds4.forEach(function(updatedCell: CellObj) {\n                    gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n                });\n            }\n        }\n    }\n\n    return updateGrid(grid, results);\n\n}\n\n/*\nx-wing\nCandidate appears twice in two different rows (or columns), and those appearances are both in the same column (or row). The candidate appears in four cells that form a square or rectangle. The candidate can only appear in two of the four cells. The two positions have to be diagonal opposites forming an X (hence the name). Safe to eliminate the candidate from other appearances in the cross axis. For example, if the candidate appears twice in two different rows, remove the candidate from the cells of the shared columns.\n*/\n\nfunction findXWings(grid: GridArr) {\n\n    let xWings: XWingObj[] = [];\n\n    function examineUnit(unitValues: UnitArr, unitIndex: number, mainAxis: 'row' | 'column') {\n\n        let candidatesExamined: number[] = [];\n        let unitResults: XWingObj[] = [];\n\n        unitValues.forEach(function(cellValue: number | number[], cellIndex: number) {\n            if (Array.isArray(cellValue)) {\n                cellValue.forEach(function(candidateValue) {\n\n                    let count = 0;\n                    let candidatePositions: CellCoords[] = [];\n\n                    unitValues.forEach(function(cellValueForComparison, cellIndexForComparison) {\n                        if (Array.isArray(cellValueForComparison)) {\n                            if (cellIndexForComparison > cellIndex) {\n                                if (!candidatesExamined.includes(candidateValue)) {\n\n                                    if (cellValueForComparison.includes(candidateValue)) {\n                                        count++;\n\n                                        if (mainAxis === 'row') {\n                                            candidatePositions.push([unitIndex, cellIndex]);\n                                            candidatePositions.push([unitIndex, cellIndexForComparison]);\n                                        }\n                                        if (mainAxis === 'column') {\n                                            candidatePositions.push([cellIndex, unitIndex]);\n                                            candidatePositions.push([cellIndexForComparison, unitIndex]);\n                                        }\n\n                                    }\n                                }\n                            }\n                        }\n                    });\n                    if (count === 1) {\n                        unitResults.push({\n                            'axis': mainAxis,\n                            'positions': candidatePositions,\n                            'value': candidateValue\n                        });\n                    }\n                    candidatesExamined.push(candidateValue);\n                });\n            }\n        });\n\n        unitResults.forEach(function(candidateCellPair) {\n            // look for same candidate value in the same cross axis units (rows or columns)\n\n            function findOtherCandidatePair(unit: UnitArr, unitIndex: number) {\n\n                // mainAxis === 'row'\n                let candidatePairUnitIndex = candidateCellPair.positions[0][0];\n                let cellACrossAxisIndex = candidateCellPair.positions[0][1];\n                let cellBCrossAxisIndex = candidateCellPair.positions[1][1];\n\n                if (mainAxis === 'column') {\n                    candidatePairUnitIndex = candidateCellPair.positions[0][1];\n                    cellACrossAxisIndex = candidateCellPair.positions[0][0];\n                    cellBCrossAxisIndex = candidateCellPair.positions[1][0];\n                }\n\n                let cellAValue = unit[cellACrossAxisIndex];\n                let cellBValue = unit[cellBCrossAxisIndex];\n\n                let count = 0;\n                let newCandidatePositions: CellCoords[] = [];\n\n                if (unitIndex > candidatePairUnitIndex) {\n                    if (Array.isArray(cellAValue) && Array.isArray(cellBValue)) {\n                        if (cellAValue.includes(candidateCellPair.value) && cellBValue.includes(candidateCellPair.value)) {\n\n                            unit.forEach(function(cellValue) {\n                                if (Array.isArray(cellValue)) {\n                                    if (cellValue.includes(candidateCellPair.value)) {\n                                        count++;\n                                    }\n                                }\n                            });\n\n                            if (count === 2) {\n\n                                if (mainAxis === 'row') {\n                                    newCandidatePositions.push([unitIndex, cellACrossAxisIndex]);\n                                    newCandidatePositions.push([unitIndex, cellBCrossAxisIndex]);\n                                }\n                                if (mainAxis === 'column') {\n                                    newCandidatePositions.push([cellACrossAxisIndex, unitIndex]);\n                                    newCandidatePositions.push([cellBCrossAxisIndex, unitIndex]);\n                                }\n\n                                const fourPositionsOfCandidate = candidateCellPair.positions.concat(newCandidatePositions);\n\n                                xWings.push({\n                                    'axis': candidateCellPair.axis,\n                                    'positions': fourPositionsOfCandidate,\n                                    'value': candidateCellPair.value\n                                });\n\n                            }\n\n                        }\n                    }\n                }\n\n            }\n\n            if (mainAxis === 'row') {\n\n                grid.forEach(function(unit, unitIndex) {\n                    findOtherCandidatePair(unit, unitIndex);\n                });\n\n            }\n            if (mainAxis === 'column') {\n\n                grid[0].forEach(function(unit, unitIndex) {\n                    const unitValues = getColumnValues(grid, unitIndex);\n                    findOtherCandidatePair(unitValues, unitIndex);\n                });\n\n            }\n\n        });\n\n    }\n\n    function getColumnValues(grid: GridArr, column: number) {\n        let columnValues: UnitArr = [];\n        grid.forEach(function(row) {\n            columnValues.push(row[column]);\n        });\n        return columnValues;\n    }\n\n    // Check rows\n    grid.forEach(function(row, index) {\n        examineUnit(row, index, 'row');\n    });\n\n    // Check columns\n    grid[0].forEach(function(column, index) {\n        examineUnit(getColumnValues(grid, index), index, 'column');\n    });\n\n    return xWings;\n\n}\n\nfunction reduceCandidatesXWing(grid: GridArr) {\n\n    const gridClone = _.cloneDeep(grid);\n    const xWings = findXWings(gridClone);\n    const results: CellObj[] = [];\n\n    xWings.forEach(function(xWing: XWingObj) {\n\n        let xWingRows = xWing.positions.map(function(position) {\n            return position[0];\n        });\n        xWingRows = xWingRows.filter(function(rowPosition, index: number) {\n            return xWingRows.indexOf(rowPosition) === index;\n        });\n\n        let xWingColumns = xWing.positions.map(function(position) {\n            return position[1];\n        });\n        xWingColumns = xWingColumns.filter(function(columnPosition, index: number) {\n            return xWingColumns.indexOf(columnPosition) === index;\n        });\n\n        if (xWing.axis === 'column') {\n\n            xWingRows.forEach(function(xWingRow: number) {\n                const rowValues = getRowValues(gridClone, xWingRow);\n                rowValues.forEach(function(cellValue, index) {\n                    if (!xWingColumns.includes(index)) {\n                        if (Array.isArray(cellValue)) {\n                            const candidatesToRemove = removeCandidateFromCell(gridClone, xWingRow, index, xWing.value);\n                            if (candidatesToRemove !== undefined) {\n                                results.push(candidatesToRemove);\n                                gridClone[candidatesToRemove.row][candidatesToRemove.column] = candidatesToRemove.value;\n                            }\n                        }\n                    }\n                });\n            });\n            \n        }\n\n        if (xWing.axis === 'row') {\n\n            xWingColumns.forEach(function(xWingColumn: number) {\n                const columnValues = getColumnValues(gridClone, xWingColumn);\n                columnValues.forEach(function(cellValue, index) {\n                    if (!xWingRows.includes(index)) {\n                        if (Array.isArray(cellValue)) {\n                            const candidatesToRemove = removeCandidateFromCell(gridClone, index, xWingColumn, xWing.value);\n                            if (candidatesToRemove !== undefined) {\n                                results.push(candidatesToRemove);\n                                gridClone[candidatesToRemove.row][candidatesToRemove.column] = candidatesToRemove.value;\n                            }\n                        }\n                    }\n                });\n            });\n            \n        }\n\n    });\n\n    return updateGrid(grid, results);\n\n}\n\nfunction removeCandidateFromCell(grid: GridArr, row: number, column: number, value: number) {\n    const cellValue = getCellValue(grid, row, column);\n\n    if (Array.isArray(cellValue) && cellValue.includes(value)) {\n        const cellValueResult = cellValue.filter(function(candidate) {\n            return candidate !== value;\n        });\n        //controller.updateCell(row, column, cellValueResult);\n        return {\n            row: row,\n            column: column,\n            value: cellValueResult\n        };\n    }\n}\n\nfunction initReduceCandidates(grid: GridArr) {\n    const results = [];\n    const gridClone = _.cloneDeep(grid);\n\n    for (let row = 0; row <= 6; row = row + 3) {\n        for (let col = 0; col <= 6; col = col + 3) {\n            const reducedCandidatesRow = reduceCandidates(gridClone, row, col, 'row');\n            const reducedCandidatesColumn = reduceCandidates(gridClone, row, col, 'column');\n            if (reducedCandidatesRow !== undefined) {\n                results.push(...reducedCandidatesRow);\n                reducedCandidatesRow.forEach(function(updatedCell) {\n                    gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n                });\n            }\n            if (reducedCandidatesColumn !== undefined) {\n                results.push(...reducedCandidatesColumn);\n                reducedCandidatesColumn.forEach(function(updatedCell) {\n                    gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n                });\n            }\n        }\n    }\n    return updateGrid(grid, results);\n}\n\nfunction reduceCandidates(grid: GridArr, row: number, column: number, direction: 'row' | 'column') {\n\n    // row and column = the nonet's top left cell, for example 0,0 and 0,3 and 3,6, etc.\n    // if direction = row, main axis = row, cross axis = column\n    // if direction = column, main axis = column, cross axis = row\n\n    // If a nonet has candidates that only exist in a row or column within the nonet, remove those candidates from other cells in the same row or column outside the nonet.\n    // For example: [6, 8, 3, [1,2], [1,2], 9, 7, 4, 5] <- nonetValues; 1s and 2s in the same row\n    // For example: [9, 6, [1,4,5], 7, 3, [1,4,5], [1,5], 2, 8] <- nonetValues; 4s in the same column\n\n    const nonetValues = getNonetValues(grid, row, column);\n    const results: CellObj[] = [];\n\n    const nonetMainAxisSet1 = nonetValues.filter(function(value, index) {\n        if (direction === 'row') {\n            return index <= 2;\n        } else {\n            // direction === 'column'\n            return index === 0 || index === 3 || index === 6;\n        }\n    }).filter(function(value): value is number[] {\n        return Array.isArray(value);\n    });\n\n    const nonetMainAxisSet2 = nonetValues.filter(function(value, index) {\n        if (direction === 'row') {\n            return index >=3 && index <=5;\n        } else {\n            // direction === 'column'\n            return index === 1 || index === 4 || index === 7;\n        }\n    }).filter(function(value): value is number[] {\n        return Array.isArray(value);\n    });\n\n    const nonetMainAxisSet3 = nonetValues.filter(function(value, index) {\n        if (direction === 'row') {\n            return index >= 6;\n        } else {\n            // direction === 'column'\n            return index === 2 || index === 5 || index === 8;\n        }\n    }).filter(function(value): value is number[] {\n        return Array.isArray(value);\n    });\n\n    const nonetMainAxisSets = [nonetMainAxisSet1, nonetMainAxisSet2, nonetMainAxisSet3];\n    let allCandidatesInCrossAxisSets: number[][] = [];\n\n    nonetMainAxisSets.forEach(function(nonetMainAxisSet) {\n        if (nonetMainAxisSet.length === 0) {\n            allCandidatesInCrossAxisSets.push([]);\n        } else {\n            let allCandidatesInMainAxisSet = nonetMainAxisSet.reduce(function(accumulator, current) {\n                return accumulator.concat(current);\n            }, []);\n            allCandidatesInMainAxisSet = Array.from(new Set(allCandidatesInMainAxisSet));\n            allCandidatesInCrossAxisSets.push(allCandidatesInMainAxisSet);\n        }\n    });\n\n    allCandidatesInCrossAxisSets.forEach(function(allCandidatesInMainAxisSet, index) {\n\n        // index === 0\n        let otherMainAxisSet1 = index + 1;\n        let otherMainAxisSet2 = index + 2;\n\n        if (index === 1) {\n            otherMainAxisSet1 = index - 1;\n            otherMainAxisSet2 = index + 1;\n        }\n        if (index === 2) {\n            otherMainAxisSet1 = index - 2;\n            otherMainAxisSet2 = index - 1;\n        }\n\n        const allCandidatesUniqueToMainAxisSet = allCandidatesInMainAxisSet.filter(function(value) {\n            const otherNonetMainAxisSetsValues = nonetMainAxisSets[otherMainAxisSet1].concat(nonetMainAxisSets[otherMainAxisSet2]).reduce(function(accumulator, current) {\n                return accumulator.concat(current);\n            }, []);\n            return !otherNonetMainAxisSetsValues.includes(value);\n        });\n\n        let gridMainAxisSetIndex: number;\n        let gridMainAxisSetValues: UnitArr;\n        let indexesToInclude: [number, number, number, number, number, number];\n\n        if (direction === 'row') {\n            gridMainAxisSetIndex = row + index;\n            gridMainAxisSetValues = getRowValues(grid, gridMainAxisSetIndex);\n\n            if (column === 0) {\n                indexesToInclude = [3, 4, 5, 6, 7, 8];\n            }\n            if (column === 3) {\n                indexesToInclude = [0, 1, 2, 6, 7, 8];\n            }\n            if (column === 6) {\n                indexesToInclude = [0, 1, 2, 3, 4, 5];\n            }\n        } else {\n            // direction === 'column'\n            gridMainAxisSetIndex = column + index;\n            gridMainAxisSetValues = getColumnValues(grid, gridMainAxisSetIndex);\n\n            if (row === 0) {\n                indexesToInclude = [3, 4, 5, 6, 7, 8];\n            }\n            if (row === 3) {\n                indexesToInclude = [0, 1, 2, 6, 7, 8];\n            }\n            if (row === 6) {\n                indexesToInclude = [0, 1, 2, 3, 4, 5];\n            }\n        }\n\n        gridMainAxisSetValues.forEach(function(cellValue, gridCrossAxisSetIndex) {\n            if (indexesToInclude.includes(gridCrossAxisSetIndex)) {\n                if (Array.isArray(cellValue) && cellValue.length > 1) {\n                    const newCandidates = cellValue.filter(function(value) {\n                        return !allCandidatesUniqueToMainAxisSet.includes(value);\n                    });\n                    if (direction === 'row') {\n                        if (newCandidates.length < cellValue.length) {\n                            results.push({\n                                row: gridMainAxisSetIndex,\n                                column: gridCrossAxisSetIndex,\n                                value: newCandidates\n                            });\n                        }\n                    }\n                    if (direction === 'column') {\n                        if (newCandidates.length < cellValue.length) {\n                            results.push({\n                                row: gridCrossAxisSetIndex,\n                                column: gridMainAxisSetIndex,\n                                value: newCandidates\n                            });\n                        }\n                    }\n                    \n                }\n            }\n        });\n\n    });\n\n    if (results.length !== 0) {\n        return results;\n    }\n\n}\n\nfunction solveCell(grid: GridArr, row: number, column: number) {\n\n    if (!(isCellSolved(grid, row, column))) {\n\n        const candidates = getCandidates(grid, row, column);\n        let newCandidates: number[] = [];\n\n        // if a single candidate works, store that value\n        if (Array.isArray(candidates) && candidates.length === 1) {    \n            return {\n                row: row,\n                column: column,\n                value: candidates[0]\n            };\n        }\n\n        const rowArrayValues: UnitArr = getRowValues(grid, row).filter(function(value, index) {\n            return index !== column;\n        }).filter(function(value) {\n            return Array.isArray(value) && value.length !== 0;\n        });\n\n        const columnArrayValues: UnitArr = getColumnValues(grid, column).filter(function(value, index) {\n            return index !== row;\n        }).filter(function(value) {\n            return Array.isArray(value) && value.length !== 0;\n        });\n\n        if (rowArrayValues.length && Array.isArray(candidates)) {\n            // if one of the candidates doesn't exist in any rowArrayValues,\n            // add that value to newCandidates array\n            candidates.forEach(function(candidate) {\n                \n                const candidateInSomeArray = rowArrayValues.some(function(arrayValue) {\n                    if (Array.isArray(arrayValue)) {\n                        return arrayValue.includes(candidate);\n                    }\n                    else if (arrayValue === candidate) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                });\n\n                if (candidateInSomeArray) {\n                    // do nothing, the candidate exists as a candidate for another cell in the same row\n                } else {\n                    newCandidates.push(candidate);\n                }\n                \n            });\n        }\n\n        if (columnArrayValues.length && Array.isArray(candidates)) {\n            // if one of the candidates doesn't exist in any columnArrayValues,\n            // add that value to newCandidates array\n            candidates.forEach(function(candidate) {\n                \n                const candidateInSomeArray = columnArrayValues.some(function(arrayValue) {\n                    if (Array.isArray(arrayValue)) {\n                        return arrayValue.includes(candidate);\n                    } else if (arrayValue === candidate) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                    \n                });\n\n                if (candidateInSomeArray) {\n                    // do nothing, the candidate exists as a candidate for another cell in the same column\n                } else {\n                    newCandidates.push(candidate);\n                }\n                \n            });\n        }\n\n        newCandidates = Array.from(new Set(newCandidates));\n\n        if (newCandidates.length === 1) {\n            return {\n                row: row,\n                column: column,\n                value: newCandidates[0]\n            };\n        }\n        if (newCandidates.length > 1) {\n            return {\n                row: row,\n                column: column,\n                value: newCandidates\n            };\n        }\n        \n    } // end if\n\n}\n\nfunction setCandidates(grid: GridArr) {\n    const cellsWithCandidates: CellObj[] = [];\n    grid.forEach(function(row, i) {\n        row.forEach(function(column, j) {\n            if (!(isCellSolved(grid, i, j))) {\n                const cellValue = getCandidates(grid, i, j);\n                if (cellValue !== undefined) {\n                    cellsWithCandidates.push({\n                        row: i,\n                        column: j,\n                        value: cellValue\n                    });\n                }\n            }\n        });\n    });\n    return updateGrid(grid, cellsWithCandidates);\n}\n\nfunction solveCells(grid: GridArr) {\n    const solvedCells: CellObj[] = [];\n    grid.forEach(function(row, i) {\n        row.forEach(function(column, j) {\n            if (!(isCellSolved(grid, i, j))) {\n                const cell = solveCell(grid, i, j);\n                if (cell !== undefined) {\n                    solvedCells.push(cell);\n                }\n            }\n        });\n    });\n    const updatedGrid = updateGrid(grid, solvedCells);\n\n    return setCandidates(updatedGrid);\n}\n\nfunction verifyCompletedGrid(grid: GridArr) {\n    const gridColumns: UnitArr[] = [];\n    const gridNonets: UnitArr[] = [];\n\n    // Check rows\n    const allRowsIncludeAllValues = grid.every(function(row) {\n        return row.every(function(value) {\n            if (typeof value === 'number') {\n                return [1,2,3,4,5,6,7,8,9].includes(value);\n            } else {\n                return false;\n            }\n        });\n    });\n\n    // Check columns\n    grid[0].forEach(function(column, index) {\n        gridColumns.push(getColumnValues(grid, index));\n    });\n\n    const allColumnsIncludeAllValues = gridColumns.every(function(column) {\n        return column.every(function(value) {\n            if (typeof value === 'number') {\n                return [1,2,3,4,5,6,7,8,9].includes(value);\n            } else {\n                return false;\n            }\n        });\n    });\n\n    // Check nonets\n    for (let row = 0; row <= 6; row = row + 3) {\n        for (let col = 0; col <= 6; col = col + 3) {\n            gridNonets.push(getNonetValues(grid, row, col));\n        }\n    }\n\n    const allNonetsIncludeAllValues = gridNonets.every(function(nonet) {\n        return nonet.every(function(value) {\n            if (typeof value === 'number') {\n                return [1,2,3,4,5,6,7,8,9].includes(value);\n            } else {\n                return false;\n            }\n        });\n    });\n\n    if (allRowsIncludeAllValues && allColumnsIncludeAllValues && allNonetsIncludeAllValues) {\n        return true;\n    }\n\n}\n\nexport { setCandidates, solveCells, solveNonets, removeNakeds, reduceCandidatesXWing, initReduceCandidates, verifyCompletedGrid, getGridNextAnswers, getGridAnswers, getDiffOfCompletedCells };\n","import React, { useState } from 'react';\nimport Cell from './Cell';\nimport NumberPad from './NumberPad';\nimport {setCandidates} from './logic';\nimport _ from 'lodash';\nimport './Grid.css';\n\ntype GridArr = (number | number[])[][];\n\ninterface GridProps {\n    currentGridValues: GridArr;\n    pastGridValues: GridArr;\n    completedGrid: GridArr;\n    updateGame: (updatedGrid: GridArr) => void; \n    givens: GridArr;\n    nextPossibleAnswers: GridArr;\n    showCandidates: boolean;\n    highlightGivens: boolean;\n    highlightSolvableCells: boolean;\n    highlightIncorrectCells: boolean;\n    isInGameMode: boolean;\n}\n\nfunction Grid(props: GridProps) {\n\n    const {currentGridValues, pastGridValues, completedGrid, updateGame, givens, nextPossibleAnswers, showCandidates, highlightGivens, highlightSolvableCells, highlightIncorrectCells, isInGameMode} = props;\n    const [cellClicked, setCellClicked] = useState<null | HTMLInputElement>(null);\n    const [activeCell, setActiveCell] = useState<null | number[]>(null);\n\n    const [isNumberPadActive, setIsNumberPadActive] = useState(false);\n    const showNumberPad = () => {\n        setIsNumberPadActive(true);\n    }\n    const hideNumberPad = () => {\n        setIsNumberPadActive(false);\n    }\n\n    function handleCellClick(coords: number[], e: React.MouseEvent<HTMLInputElement, MouseEvent>) {\n        if (cellClicked === e.target) {\n            isNumberPadActive ? hideNumberPad() : showNumberPad();\n        } else {\n            showNumberPad();\n        }\n        setCellClicked(e.target as HTMLInputElement);\n        setActiveCell(coords);\n        (e.target as HTMLInputElement).select();\n    }\n\n    function handleNumberPadButtonClick(e: React.MouseEvent<HTMLButtonElement>) {\n        const newGridValues = _.cloneDeep(currentGridValues);\n        const row = activeCell !== null ? activeCell[0]: null;\n        const col = activeCell !== null ? activeCell[1]: null;\n        const targetButton = e.target as HTMLButtonElement;\n        let isCorrect: boolean = false;\n\n        if (row !== null && col !== null) {\n\n            if (targetButton.className === 'clear-button') {\n                newGridValues[row][col] = pastGridValues[row][col];\n            } else if (targetButton.className === 'solve-button') {\n                newGridValues[row][col] = completedGrid[row][col];\n            } else {\n                newGridValues[row][col] = Number(targetButton.value);\n            }\n    \n            isCorrect = newGridValues[row][col] === completedGrid[row][col];\n\n        }\n        \n        if (isCorrect) {\n            updateGame(setCandidates(newGridValues));\n        } else {\n            updateGame(newGridValues);\n        }\n\n        hideNumberPad();\n        \n    }\n\n    function handleKeyDown(coords: number[], e: React.KeyboardEvent<HTMLInputElement>) {\n        const newGridValues = _.cloneDeep(currentGridValues);\n        const row = coords[0];\n        const col = coords[1];\n\n        if (e.key === 'Backspace' || e.key === 'Delete') {\n            newGridValues[row][col] = [];\n        } else if (RegExp('[1-9]').test(e.key)) {\n            newGridValues[row][col] = Number(e.key);\n        } else {\n            e.preventDefault();\n        }\n\n        const isCorrect = newGridValues[row][col] === completedGrid[row][col];\n\n        if (isCorrect) {\n            updateGame(setCandidates(newGridValues));\n        } else {\n            updateGame(newGridValues);\n        }\n\n        hideNumberPad();\n\n    }\n\n    function createGrid() {\n        let grid = [];\n    \n        for (let i = 0; i < 9; i++) {\n            for (let j = 0; j < 9; j++) {\n                grid.push(renderCell(i, j));\n            }\n        }\n    \n        return grid;\n    }\n    \n    function renderCell(i: number, j: number) {\n        return (\n            <Cell\n                key={`r${i}c${j}`}\n                row={i}\n                column={j}\n                value={currentGridValues[i][j]}\n                handleClick={handleCellClick}\n                handleKeyDown={handleKeyDown}\n                isGiven={Number.isInteger(givens[i][j])}\n                canBeSolved={Number.isInteger(nextPossibleAnswers[i][j])}\n                isIncorrect={ isInGameMode && (Number.isInteger(currentGridValues[i][j]) && currentGridValues[i][j] !== completedGrid[i][j]) }\n            />\n        );\n    }\n\n    const gridClassName = `grid${showCandidates === false ? ' hide-candidates' : ''}${highlightGivens === true ? ' highlight-givens' : ''}${highlightSolvableCells === true ? ' highlight-solvable-cells' : ''}${highlightIncorrectCells === true ? ' highlight-incorrect-cells' : ''}`;\n\n    return (\n        <div className=\"grid-wrapper\">\n            <div id=\"grid\" className={gridClassName}>\n                {createGrid()}\n            </div>\n            <NumberPad\n                cellClicked={cellClicked}\n                handleNumberPadButtonClick={handleNumberPadButtonClick}\n                hideNumberPad={hideNumberPad}\n                isNumberPadActive={isNumberPadActive}\n            />\n        </div>\n    );\n}\n\nexport default Grid;","const games = {\n    'easy': [\n        [[[],[],[],[],[],3,1,[],4],[2,6,[],5,[],4,[],[],[]],[[],3,9,[],[],[],8,5,[]],[7,[],3,[],4,6,[],[],[]],[[],[],[],3,[],8,[],[],[]],[[],[],[],7,1,[],4,[],3],[[],4,2,[],[],[],7,3,[]],[[],[],[],4,[],5,[],1,9],[9,[],6,8,[],[],[],[],[]]],\n        [[[],[],4,7,[],[],5,[],6],[[],[],1,[],[],4,[],[],2],[2,[],[],[],1,[],[],[],8],[1,[],9,[],7,3,[],[],[]],[[],6,[],1,[],5,[],2,[]],[[],[],[],6,9,[],7,[],1],[5,[],[],[],2,[],[],[],7],[7,[],[],3,[],[],2,[],[]],[9,[],2,[],[],7,8,[],[]]]\n    ],\n    'medium': [\n        [[3,[],[],[],6,[],[],[],[]],[[],1,4,[],[],[],9,[],7],[6,5,[],[],[],7,[],[],[]],[[],8,[],[],2,5,[],[],[]],[1,[],9,[],[],[],6,[],2],[[],[],[],6,9,[],[],8,[]],[[],[],[],4,[],[],[],7,6],[4,[],1,[],[],[],5,9,[]],[[],[],[],[],7,[],[],[],8]],\n        [[[],[],[],[],1,[],[],6,9],[[],[],[],[],[],8,[],3,7],[[],[],[],[],[],[],8,[],[]],[4,[],[],3,2,1,9,[],[]],[[],[],7,[],9,[],5,[],[]],[[],[],2,7,5,6,[],[],3],[[],[],8,[],[],[],[],[],[]],[5,3,[],2,[],[],[],[],[]],[9,2,[],[],4,[],[],[],[]]]\n    ],\n    'hard': [\n        [[[],7,[],[],[],[],[],[],[]],[[],[],[],[],[],[],8,[],[]],[2,[],6,[],9,1,4,[],[]],[[],[],[],9,[],[],[],6,[]],[[],1,5,[],[],7,[],4,[]],[[],8,[],[],5,[],[],9,[]],[[],3,[],4,[],[],[],[],[]],[[],[],8,[],6,[],7,[],[]],[7,[],[],[],3,[],[],1,9]],\n        [[5,[],3,7,6,[],[],[],[]],[[],2,6,[],[],[],7,[],[]],[[],[],[],1,[],[],[],8,[]],[7,[],[],[],4,[],[],[],1],[[],[],4,[],[],[],[],[],6],[[],1,[],[],[],6,[],7,3],[9,[],[],[],[],[],[],[],8],[[],[],[],[],[],5,[],[],[]],[[],[],[],6,[],3,1,9,[]]],\n        [[[],6,[],[],[],5,[],[],[]],[[],7,[],[],[],[],[],[],1],[[],[],[],[],6,3,4,[],[]],[[],[],3,[],8,[],[],[],[]],[2,1,[],[],9,[],[],[],5],[4,[],[],[],[],7,8,[],[]],[[],[],1,6,[],[],[],8,4],[[],[],[],[],[],[],[],5,[]],[8,[],[],[],4,[],6,1,[]]],\n        [[[],[],5,7,[],[],[],[],[]],[[],[],7,[],[],9,6,[],8],[[],8,[],[],[],2,[],1,[]],[[],3,[],[],[],[],[],[],[]],[5,[],[],2,6,1,[],7,[]],[[],[],[],8,[],[],1,[],9],[[],[],[],1,[],[],[],[],3],[3,[],9,[],2,[],[],8,[]],[[],[],[],[],4,[],[],[],[]]],\n        [[[],3,[],[],[],5,[],[],[]],[5,1,[],[],3,[],8,[],7],[[],[],[],4,[],[],[],[],1],[[],6,[],2,[],[],[],1,[]],[[],[],1,[],[],[],7,[],[]],[[],9,[],[],[],1,[],4,[]],[4,[],[],[],[],9,[],[],[]],[1,[],9,[],8,[],[],7,5],[[],[],[],3,[],[],[],8,[]]],\n        [[[],[],[],[],[],8,[],7,[]],[[],[],5,[],6,9,[],[],[]],[[],[],[],[],[],5,8,9,2],[[],[],1,6,[],[],[],3,[]],[4,[],[],[],[],[],[],[],1],[[],9,[],[],[],1,4,[],[]],[7,4,3,9,[],[],[],[],[]],[[],[],[],4,2,[],3,[],[]],[[],8,[],5,[],[],[],[],[]]],\n        [[[],[],2,1,8,6,[],[],[]],[[],[],[],[],[],[],2,[],[]],[[],3,[],9,[],[],[],[],[]],[2,[],3,6,[],[],8,9,[]],[4,[],[],[],5,[],[],[],1],[[],6,8,[],[],2,7,[],5],[[],[],[],[],[],9,[],5,[]],[[],[],4,[],[],[],[],[],[]],[[],[],[],3,6,7,9,[],[]]],\n        [[6,[],[],[],9,2,[],[],[]],[[],[],8,5,[],6,[],[],2],[3,[],[],4,[],[],[],[],[]],[2,[],4,[],[],[],[],8,[]],[[],[],5,[],[],[],[],[],1],[[],[],[],9,[],[],6,[],5],[[],[],[],[],1,[],3,[],[]],[4,[],[],[],[],[],[],9,[]],[[],1,[],7,8,[],[],[],6]],\n        [[9,6,[],[],1,[],[],[],3],[3,1,[],[],8,[],2,[],[]],[[],[],[],[],[],[],8,[],[]],[[],4,9,[],[],6,[],[],[]],[1,[],[],[],9,8,[],[],[]],[[],[],6,5,[],[],[],3,7],[[],3,[],[],[],[],[],2,6],[[],9,[],1,[],[],[],[],[]],[[],7,4,[],2,5,[],9,[]]],\n        [[6,[],[],[],[],[],[],3,[]],[[],[],1,[],[],[],5,[],7],[[],7,[],2,[],4,[],8,[]],[7,[],2,4,[],6,[],[],[]],[[],[],[],[],[],[],3,[],[]],[9,1,[],[],[],[],2,7,4],[[],6,7,8,9,[],1,4,3],[1,4,[],[],3,[],[],9,[]],[[],[],[],[],4,[],[],[],2]]\n    ],\n    'expert': [\n        [[[],[],[],9,[],2,[],[],5],[[],[],[],[],[],5,1,3,[]],[[],[],9,[],[],[],[],2,[]],[[],5,3,[],[],[],[],[],6],[4,[],[],[],8,[],[],[],1],[9,[],[],[],[],[],4,7,[]],[[],6,[],[],[],[],7,[],[]],[[],9,1,4,[],[],[],[],[]],[8,[],[],5,[],7,[],[],[]]],\n        [[[],[],[],9,[],2,[],[],5],[[],[],[],[],[],5,1,3,[]],[[],[],9,[],[],[],[],2,[]],[[],5,3,[],[],[],[],[],6],[4,[],[],[],8,[],[],[],1],[9,[],[],[],[],[],4,7,[]],[[],6,[],[],[],[],7,[],[]],[[],9,1,4,[],[],[],[],[]],[8,[],[],5,[],7,[],[],[]]],\n        [[[],[],[],8,[],[],[],1,[]],[[],[],[],2,[],[],8,9,6],[[],[],[],[],6,[],[],[],2],[2,[],[],[],[],[],3,[],[]],[[],[],8,3,[],1,4,[],[]],[[],[],7,[],[],[],[],[],9],[6,[],[],[],7,[],[],[],[]],[9,7,2,[],[],3,[],[],[]],[[],3,[],[],[],4,[],[],[]]],\n        [[[],9,1,[],[],[],[],[],5],[[],[],[],[],9,4,3,[],[]],[[],3,[],6,[],[],[],[],[]],[[],[],[],[],[],[],[],7,9],[2,[],[],1,[],7,[],[],6],[8,5,[],[],[],[],[],[],[]],[[],[],[],[],[],1,[],5,[]],[[],[],2,4,3,[],[],[],[]],[5,[],[],[],[],[],2,4,[]]],\n        [[[],[],[],[],[],1,[],[],[]],[[],6,[],[],[],[],4,[],[]],[[],9,[],5,3,[],[],[],8],[[],4,[],[],5,3,[],[],7],[[],8,[],[],[],[],[],5,[]],[7,[],[],1,2,[],[],6,[]],[8,[],[],[],1,6,[],2,[]],[[],[],5,[],[],[],[],9,[]],[[],[],[],8,[],[],[],[],[]]],\n        [[[],[],[],[],[],7,3,[],[]],[[],7,[],[],8,[],5,[],9],[6,[],1,[],[],[],[],[],7],[[],[],5,[],[],6,[],9,[]],[[],[],[],[],4,[],[],[],[]],[[],6,[],5,[],[],2,[],[]],[2,[],[],[],[],[],9,[],1],[1,[],9,[],5,[],[],7,[]],[[],[],3,8,[],[],[],[],[]]],\n        [[3,[],[],[],[],2,[],[],6],[[],[],[],[],[],[],[],[],[]],[[],[],[],6,4,[],7,3,5],[[],1,[],[],2,[],[],6,[]],[6,[],[],4,[],7,[],[],1],[[],9,[],[],3,[],[],2,[]],[5,2,3,[],6,1,[],[],[]],[[],[],[],[],[],[],[],[],[]],[7,[],[],5,[],[],[],[],2]],\n        [[7,[],[],1,4,[],[],[],9],[1,[],[],2,[],[],[],4,[]],[[],5,[],[],3,[],[],[],[]],[[],[],[],[],2,[],1,[],4],[[],[],6,[],7,[],8,[],[]],[5,[],1,[],9,[],[],[],[]],[[],[],[],[],5,[],[],6,[]],[[],3,[],[],[],4,[],[],7],[2,[],[],[],8,6,[],[],1]],\n        [[[],[],[],[],5,4,3,8,[]],[[],[],5,9,8,[],[],[],2],[[],8,[],[],3,[],[],[],[]],[5,[],[],6,[],[],[],7,[]],[3,[],4,[],7,[],2,[],9],[[],7,[],[],[],9,[],[],1],[[],[],[],[],1,[],[],2,[]],[7,[],[],[],9,3,6,[],[]],[[],5,1,7,6,[],[],[],[]]],\n        [[[],[],[],[],[],[],6,8,[]],[[],[],[],[],7,3,[],[],9],[3,[],9,[],[],[],[],4,5],[4,9,[],[],[],[],[],[],[]],[8,[],3,[],5,[],9,[],2],[[],[],[],[],[],[],[],3,6],[9,6,[],[],[],[],3,[],8],[7,[],[],6,8,[],[],[],[]],[[],2,8,[],[],[],[],[],[]]],\n        [[6,[],[],1,7,[],[],[],5],[[],[],[],[],4,[],[],2,[]],[[],[],[],[],[],[],8,9,[]],[[],3,7,8,[],[],[],[],2],[5,[],[],[],[],1,[],[],9],[[],[],2,[],[],[],[],[],[]],[[],[],5,[],2,4,[],[],[]],[[],[],[],[],1,[],6,[],[]],[7,[],[],3,[],[],[],[],[]]],\n        [[[],[],[],1,[],[],6,[],3],[[],8,7,[],4,[],[],[],5],[9,[],3,[],[],[],[],[],[]],[[],[],5,[],[],6,[],[],[]],[7,[],[],[],[],1,[],[],[]],[[],9,[],[],[],3,[],5,[]],[1,6,[],[],[],[],[],[],[]],[5,[],[],[],[],[],7,[],4],[[],[],[],[],8,[],[],[],2]],\n        [[[],[],[],6,[],[],[],8,[]],[[],[],2,[],[],5,[],4,[]],[[],[],3,[],2,[],[],1,[]],[[],2,6,[],[],7,1,[],[]],[9,[],[],[],[],[],[],[],5],[[],[],4,9,[],[],2,7,[]],[[],1,[],[],5,[],3,[],[]],[[],6,[],3,[],[],8,[],[]],[[],9,[],[],[],1,[],[],[]]],\n        [[[],[],[],3,[],[],6,5,[]],[[],[],1,[],2,[],[],8,[]],[5,3,[],6,9,[],[],1,[]],[[],[],5,[],[],2,1,3,[]],[[],[],[],9,5,[],2,4,[]],[7,[],[],[],[],[],8,[],[]],[[],[],7,8,[],[],5,[],3],[8,[],[],[],3,[],[],7,[]],[2,4,3,[],1,7,[],6,[]]]\n    ]\n}\n\nexport default games;","import { useState } from 'react';\nimport games from './games';\n\nfunction getRandomInt(max: number) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\ntype GridArr = (number | number[])[][];\n\ninterface NewGamePanelProps {\n    createNewGame: (initialGrid: GridArr) => void;\n    createCustomGame: () => void;\n    toggleMenu: () => void;\n}\n\nfunction NewGamePanel(props: NewGamePanelProps) {\n\n    const [difficultyLevel, setDifficultyLevel] = useState('Easy');\n    const {createNewGame, createCustomGame, toggleMenu} = props;\n\n    function generateGame() {\n        if (difficultyLevel === 'Easy') {\n            createNewGame(\n                games.easy[getRandomInt(games.easy.length)]\n            );\n        }\n        if (difficultyLevel === 'Medium') {\n            createNewGame(\n                games.medium[getRandomInt(games.medium.length)]\n            );\n        }\n        if (difficultyLevel === 'Hard') {\n            createNewGame(\n                games.hard[getRandomInt(games.hard.length)]\n            );\n        }\n        if (difficultyLevel === 'Expert') {\n            createNewGame(\n                games.expert[getRandomInt(games.expert.length)]\n            );\n        }\n    }\n\n    return (\n        <div className=\"new-game-panel\">\n            <div className=\"form-group\">\n                <label htmlFor=\"difficulty-selector\">Difficulty: </label>\n                <select\n                    id=\"difficulty-selector\"\n                    className=\"form-control\"\n                    value={difficultyLevel}\n                    onChange={(e) => {\n                        setDifficultyLevel(e.target.value);\n                    }}\n                >\n                    <option value=\"Easy\">Easy</option>\n                    <option value=\"Medium\">Medium</option>\n                    <option value=\"Hard\">Hard</option>\n                    <option value=\"Expert\">Expert</option>\n                </select>\n            </div>\n            <button className=\"btn btn-block btn-primary\" onClick={() => {\n                generateGame();\n                toggleMenu();\n            }}>\n                Generate Game\n            </button>\n            <button className=\"btn btn-block btn-primary\" onClick={() => {\n                createCustomGame();\n                toggleMenu();\n            }}>\n                Create Custom Game\n            </button>\n        </div>\n    );\n}\n\nexport default NewGamePanel;","interface GameSettingsPanelProps {\n    showCandidates: boolean;\n    setShowCandidates: React.Dispatch<React.SetStateAction<boolean>>;\n    highlightGivens: boolean;\n    setHighlightGivens: React.Dispatch<React.SetStateAction<boolean>>;\n    highlightSolvableCells: boolean;\n    setHighlightSolvableCells: React.Dispatch<React.SetStateAction<boolean>>;\n    highlightIncorrectCells: boolean;\n    setHighlightIncorrectCells: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction GameSettingsPanel(props: GameSettingsPanelProps) {\n\n    const {\n        showCandidates, setShowCandidates,\n        highlightGivens, setHighlightGivens,\n        highlightSolvableCells, setHighlightSolvableCells,\n        highlightIncorrectCells, setHighlightIncorrectCells\n    } = props;\n\n    return (\n        <div className=\"game-settings\">\n            <div className=\"form-group form-check\">\n                <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"show-candidates\"\n                    name=\"show-candidates\"\n                    checked={showCandidates}\n                    onChange={(e) => {\n                        setShowCandidates(e.target.checked);\n                    }}\n                />\n                <label htmlFor=\"show-candidates\" className=\"form-check-label\">\n                    Show Candidates\n                </label>\n            </div>\n            <div className=\"form-group form-check\">\n                <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"highlight-givens\"\n                    name=\"highlight-givens\"\n                    checked={highlightGivens}\n                    onChange={(e) => {\n                        setHighlightGivens(e.target.checked);\n                    }}\n                />\n                <label htmlFor=\"highlight-givens\" className=\"form-check-label\">\n                    Highlight Givens\n                </label>\n            </div>\n            <div className=\"form-group form-check\">\n                <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"highlight-solvable\"\n                    name=\"highlight-solvable\"\n                    checked={highlightSolvableCells}\n                    onChange={(e) => {\n                        setHighlightSolvableCells(e.target.checked);\n                    }}\n                />\n                <label htmlFor=\"highlight-solvable\" className=\"form-check-label\">\n                    Highlight Solvable Cells\n                </label>\n            </div>\n            <div className=\"form-group form-check\">\n                <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"highlight-incorrect-cells\"\n                    name=\"highlight-incorrect-cells\"\n                    checked={highlightIncorrectCells}\n                    onChange={(e) => {\n                        setHighlightIncorrectCells(e.target.checked);\n                    }}\n                />\n                <label htmlFor=\"highlight-incorrect-cells\" className=\"form-check-label\">\n                    Highlight Incorrect Cells\n                </label>\n            </div>\n        </div>\n    );\n}\n\nexport default GameSettingsPanel;","import './History.css';\n\ntype GridArr = (number | number[])[][];\n\ninterface HistoryObj {\n    grid: GridArr;\n}\n\ninterface HistoryProps {\n    history: HistoryObj[];\n    jumpToStepInHistory: (step:number) => void;\n    currentStep: number;\n}\n\nfunction History(props: HistoryProps) {\n\n    const currentStep = props.currentStep;\n    const historyLength = props.history.length;\n\n    // Previous Button\n    const previousButtonAttrs = {\n        onClick: () => props.jumpToStepInHistory(currentStep - 1),\n        disabled: false,\n        className: 'btn btn-primary'\n    }\n    if (currentStep === 0) {\n        previousButtonAttrs.disabled = true;\n    }\n\n    // Next Button\n    const nextButtonAttrs = {\n        onClick: () => props.jumpToStepInHistory(currentStep + 1),\n        disabled: false,\n        className: 'btn btn-primary'\n    }\n    if (historyLength - 1 === currentStep) {\n        nextButtonAttrs.disabled = true;\n    }\n\n    return (\n        <div className=\"history\">\n            <div className=\"history-nav d-flex\">\n                <button {...previousButtonAttrs}><svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"caret-left\" className=\"svg-inline--fa fa-caret-left fa-w-6\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\"><path fill=\"currentColor\" d=\"M192 127.338v257.324c0 17.818-21.543 26.741-34.142 14.142L29.196 270.142c-7.81-7.81-7.81-20.474 0-28.284l128.662-128.662c12.599-12.6 34.142-3.676 34.142 14.142z\"></path></svg><span className=\"sr-only\">Previous Step</span></button>\n                    <span className=\"history-current-step\">{currentStep}&nbsp;/&nbsp;{historyLength - 1}</span>\n                <button {...nextButtonAttrs}><svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"caret-right\" className=\"svg-inline--fa fa-caret-right fa-w-6\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\"><path fill=\"currentColor\" d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path></svg><span className=\"sr-only\">Next Step</span></button>\n            </div>\n        </div>\n    );\n}\n\nexport default History;","import React, { useState, useEffect, useCallback } from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Grid from './Grid';\nimport NewGamePanel from './NewGamePanel';\nimport GameSettingsPanel from './GameSettingsPanel';\nimport History from './History';\nimport { setCandidates, verifyCompletedGrid, getGridAnswers, getGridNextAnswers, getDiffOfCompletedCells } from './logic';\nimport _ from 'lodash';\n\ntype GridArr = (number | number[])[][];\n\ninterface HistoryObj {\n    grid: GridArr;\n}\n\nfunction App() {\n\n    function generateEmptyBoard() {\n        return [[[],[],[],[],[],[],[],[],[]],[[],[],[],[],[],[],[],[],[]],[[],[],[],[],[],[],[],[],[]],[[],[],[],[],[],[],[],[],[]],[[],[],[],[],[],[],[],[],[]],[[],[],[],[],[],[],[],[],[]],[[],[],[],[],[],[],[],[],[]],[[],[],[],[],[],[],[],[],[]],[[],[],[],[],[],[],[],[],[]]];\n    }\n\n    const historyJson = localStorage.getItem('sudokuHistory');\n    const [history, setHistory] = useState<HistoryObj[]>(\n        historyJson !== null ? JSON.parse(historyJson) : [{ grid: generateEmptyBoard() }]\n    );\n\n    const stepNumberJson = localStorage.getItem('sudokuStepNumber');\n    const [stepNumber, setStepNumber] = useState<number>(\n        stepNumberJson !== null ? JSON.parse(stepNumberJson) : 0\n    );\n\n    const showCandidatesJson = localStorage.getItem('sudokuShowCandidates');\n    const [showCandidates, setShowCandidates] = useState<boolean>(\n        showCandidatesJson !== null ? JSON.parse(showCandidatesJson) : false\n    );\n\n    const highlightGivensJson = localStorage.getItem('sudokuHighlightGivens');\n    const [highlightGivens, setHighlightGivens] = useState<boolean>(\n        highlightGivensJson !== null ? JSON.parse(highlightGivensJson) : true\n    );\n\n    const highlightSolvableCellsJson = localStorage.getItem('sudokuHighlightSolvableCells');\n    const [highlightSolvableCells, setHighlightSolvableCells] = useState<boolean>(\n        highlightSolvableCellsJson !== null ? JSON.parse(highlightSolvableCellsJson) : true\n    );\n\n    const highlightIncorrectCellsJson = localStorage.getItem('sudokuHighlightIncorrectCells');\n    const [highlightIncorrectCells, setHighlightIncorrectCells] = useState<boolean>(\n        highlightIncorrectCellsJson !== null ? JSON.parse(highlightIncorrectCellsJson) : true\n    );\n\n    const [isInGameMode, setIsInGameMode] = useState(true);\n\n    const [menuIsOpen, setMenuIsOpen] = useState(false);\n\n    function toggleMenu() {\n        setMenuIsOpen(!menuIsOpen);\n    }\n\n    const prevHistory = _.cloneDeep(history);\n    const addHistory = (newHistory: HistoryObj) => setHistory([...prevHistory, newHistory]);\n    const currentGridValues = history[stepNumber].grid;\n    const nextGridValues = getGridNextAnswers(currentGridValues);\n    const nextPossibleAnswers = getDiffOfCompletedCells(currentGridValues, nextGridValues);\n    let completedGrid = isInGameMode ? getGridAnswers(history[0].grid) : generateEmptyBoard();\n\n    const checkCompletedGridMemoizedCallback = useCallback(\n        (grid) => {\n            if (isGridFull(grid) === true) {\n                if (_.isEqual(grid, completedGrid)) {\n                    if (verifyCompletedGrid(grid) === true) {\n                        alert('Congrats! Sudoku game completed successfully!');\n                    }\n                } else {\n                    alert('Sorry, some numbers aren\\'t where they should be.');\n                }\n            }\n        }, [completedGrid]\n    );\n\n    useEffect(() => {\n        localStorage.setItem('sudokuHistory', JSON.stringify(history));\n        localStorage.setItem('sudokuStepNumber', JSON.stringify(stepNumber));\n        localStorage.setItem('sudokuShowCandidates', JSON.stringify(showCandidates));\n        localStorage.setItem('sudokuHighlightGivens', JSON.stringify(highlightGivens));\n        localStorage.setItem('sudokuHighlightSolvableCells', JSON.stringify(highlightSolvableCells));\n        localStorage.setItem('sudokuHighlightIncorrectCells', JSON.stringify(highlightIncorrectCells));\n        checkCompletedGridMemoizedCallback(currentGridValues);\n    }, [history, stepNumber, showCandidates, highlightGivens, highlightSolvableCells, highlightIncorrectCells, checkCompletedGridMemoizedCallback, currentGridValues]);\n    \n    function updateGame(updatedGrid: GridArr) {\n        if (isInGameMode) {\n            addHistory({\n                grid: updatedGrid\n            });\n            setStepNumber(history.length);\n        } else {\n            setHistory([{\n                grid: updatedGrid\n            }]);\n        }\n    }\n\n    function jumpToStepInHistory(step: number) {\n        setStepNumber(step);\n    }\n\n    function createCustomGame() {\n        setHistory([{ grid: generateEmptyBoard() }]);\n        setStepNumber(0);\n        setIsInGameMode(false);\n    }\n\n    function createNewGame(initialGrid: GridArr) {\n        setHistory([{ grid: setCandidates(initialGrid) }]);\n        setStepNumber(0);\n        setIsInGameMode(true);\n    }\n\n    function isGridFull(currentGridValues: GridArr) {\n        const currentGridValuesFlat = currentGridValues.flat();\n        return currentGridValuesFlat.every((value) => Number.isInteger(value));\n    }\n\n    return (\n        <div className=\"App\">\n            <Dropdown id=\"dropdown-game-menu\" className=\"text-right\" show={menuIsOpen}>\n                <Dropdown.Toggle variant=\"primary\" id=\"game-menu\" onClick={() => { toggleMenu() }}>\n                    <span className=\"sr-only\">Menu</span>\n                    <span className=\"navbar-toggler-icon\"></span>\n                </Dropdown.Toggle>\n                <Dropdown.Menu className=\"p-4\">\n                    <h2>Start a New Game</h2>\n                    <NewGamePanel\n                        createNewGame={createNewGame}\n                        createCustomGame={createCustomGame}\n                        toggleMenu={toggleMenu}\n                    />\n                    <Dropdown.Divider />\n                    <h2>Settings</h2>\n                    <GameSettingsPanel\n                        showCandidates={showCandidates}\n                        setShowCandidates={setShowCandidates}\n                        highlightGivens={highlightGivens}\n                        setHighlightGivens={setHighlightGivens}\n                        highlightSolvableCells={highlightSolvableCells}\n                        setHighlightSolvableCells={setHighlightSolvableCells}\n                        highlightIncorrectCells={highlightIncorrectCells}\n                        setHighlightIncorrectCells={setHighlightIncorrectCells}\n                    />\n                    <Dropdown.Divider />\n                    <button className=\"btn btn-block btn-primary\" onClick={() => {\n                        toggleMenu();\n                        updateGame(completedGrid);\n                    }}>\n                        Solve Puzzle\n                    </button>\n                </Dropdown.Menu>\n            </Dropdown>\n\n            <div className={isInGameMode === true ? \"custom-game-instructions d-none\" : \"custom-game-instructions\"}>\n                <p>Enter your starting numbers (\"givens\") in the cells to create your own game. When you have finished entering all the givens, click \"Start Game\" to start solving the puzzle.</p>\n                <button className=\"btn btn-primary\" onClick={() => { createNewGame(currentGridValues) }}>\n                    Start Game\n                </button>\n            </div>\n\n            <Grid\n                currentGridValues={currentGridValues}\n                pastGridValues={\n                    stepNumber > 0\n                        ? history[stepNumber - 1].grid\n                        : history[0].grid\n                }\n                updateGame={updateGame}\n                givens={history[0].grid}\n                highlightGivens={highlightGivens}\n                highlightSolvableCells={highlightSolvableCells}\n                highlightIncorrectCells={highlightIncorrectCells}\n                showCandidates={showCandidates}\n                nextPossibleAnswers={nextPossibleAnswers}\n                completedGrid={completedGrid}\n                isInGameMode={isInGameMode}\n            />\n            \n            <h2>Game History</h2>\n            <History\n                history={history}\n                jumpToStepInHistory={jumpToStepInHistory}\n                currentStep={stepNumber}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}