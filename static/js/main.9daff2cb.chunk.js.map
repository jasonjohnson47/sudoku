{"version":3,"sources":["Cell.tsx","NumberPad.tsx","logic.ts","Grid.tsx","games.ts","NewGamePanel.tsx","GameSettingsPanel.tsx","History.tsx","HighlightCellOptions.tsx","App.tsx","index.tsx"],"names":["Cell","props","row","column","value","isGiven","canBeSolved","isIncorrect","hasCandidate","isInGameMode","handleClick","handleKeyDown","inputAttrs","disabled","cellDivClassName","candidates","map","i","Array","isArray","includes","id","className","type","maxLength","pattern","inputMode","onChange","onClick","e","onKeyDown","NumberPad","cellClicked","handleNumberPadButtonClick","handleCandidateButtonClick","hideNumberPad","isNumberPadActive","activeCellValue","completedGridCellValue","useState","top","bottom","left","right","numberPadStyle","setNumberPadStyle","manageCandidatesMode","setManageCandidatesMode","activeCell","parentElement","numberPadRef","useRef","useEffect","grid","document","getElementById","numberPadDiv","current","buttonTarget","target","contains","handleEscapeKey","key","numberPad","gridTop","getBoundingClientRect","x","y","width","height","body","scrollTop","numberPadBottom","offsetHeight","offsetTop","numberPadWidth","offsetWidth","numberPadLeft","offsetLeft","numberPadRight","windowHeight","documentElement","clientHeight","windowWidth","clientWidth","positionStyles","getNumberPadPosition","addEventListener","removeEventListener","style","ref","numberButtons","push","createNumberButtons","toggleButtons","ButtonGroup","toggle","ToggleButton","checked","createCandidateButtons","buttonElem","clearButton","classList","solveButton","name","htmlFor","getGridNextAnswers","solvedCells","forEach","j","isCellSolved","cell","getCandidates","newCandidates","length","rowArrayValues","getRowValues","filter","index","columnArrayValues","getColumnValues","candidate","some","arrayValue","from","Set","solveCell","undefined","setCandidates","updateGrid","solveCells","col","crosshatchNonet","solveNonets","gridClone","_","cloneDeep","xWings","examineUnit","unitValues","unitIndex","mainAxis","candidatesExamined","unitResults","cellValue","cellIndex","candidateValue","count","candidatePositions","cellValueForComparison","cellIndexForComparison","candidateCellPair","findOtherCandidatePair","unit","candidatePairUnitIndex","positions","cellACrossAxisIndex","cellBCrossAxisIndex","cellAValue","cellBValue","newCandidatePositions","fourPositionsOfCandidate","concat","axis","columnValues","findXWings","results","xWing","xWingRows","position","rowPosition","indexOf","xWingColumns","columnPosition","xWingRow","candidatesToRemove","removeCandidateFromCell","xWingColumn","reduceCandidatesXWing","rowValues","rowIndex","removeNakeds3","removeNakedsFromUnit","findNakeds","removeNakeds4","updatedCell","columnIndex","nonetValues","getNonetValues","removeNakeds","reducedCandidatesRow","reduceCandidates","reducedCandidatesColumn","initReduceCandidates","updatedCells","updatedGrid","generateNonet","topLeftCellRow","topLeftCellCol","nonet","getNonetRowsCols","rowOrCol","rowOrCol1","rowOrCol2","rowOrCol3","nonetRows","nonetColumns","temporaryNonetValues","nonetRowValues","nonetColumnValues","emptyCount","gridCell","nonetValuesArrayIndexToGridCell","nonetValuesIndex","nonetTopLeftSqRow","nonetTopLeftSqCol","gridCellRow","gridCellCol","startingCandidates","allValues","quantity","tempUnitValues","slice","cellsWithSameCandidates","result","findNakedsStep","arrayOfValues","cellsWithCandidates","lastGoodValue","cellsToExcludeCount","reduce","accumulator","currentValue","combined","shift","nakeds","unitIndexes","unitType","differentCandidates","isEqual","getCellValue","direction","nonetMainAxisSets","allCandidatesInCrossAxisSets","nonetMainAxisSet","allCandidatesInMainAxisSet","otherMainAxisSet1","otherMainAxisSet2","gridMainAxisSetIndex","gridMainAxisSetValues","indexesToInclude","allCandidatesUniqueToMainAxisSet","gridCrossAxisSetIndex","verifyCompletedGrid","gridColumns","gridNonets","allRowsIncludeAllValues","every","allColumnsIncludeAllValues","allNonetsIncludeAllValues","Grid","currentGridValues","currentGridNoIncorrect","completedGrid","updateGame","givens","nextPossibleAnswers","showCandidates","highlightGivens","highlightSolvableCells","highlightIncorrectCells","highlightCellValue","showAnswers","setCellClicked","setActiveCell","setIsNumberPadActive","showNumberPad","handleCellClick","coords","select","newGridValues","RegExp","test","Number","preventDefault","isCorrect","canCellBeSolved","nextPossibleAnswer","isInteger","checkIfCorrect","renderCell","parseInt","gridClassName","createGrid","targetButton","targetButtonValue","newCellValue","games","getRandomInt","max","Math","floor","random","NewGamePanel","difficultyLevel","setDifficultyLevel","createNewGame","createCustomGame","toggleMenu","easy","medium","hard","expert","GameSettingsPanel","setShowCandidates","setHighlightGivens","setHighlightSolvableCells","setHighlightIncorrectCells","darkMode","setDarkMode","History","history","jumpToStepInHistory","currentStep","heading","historyLength","previousButtonAttrs","nextButtonAttrs","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","event","currentTarget","HighlightCellOptions","setHighlightCellValue","App","generateEmptyBoard","emptyBoard","checkCompletedGrid","flat","isGridFull","alert","historyJson","localStorage","getItem","JSON","parse","setHistory","setItem","stringify","stepNumberJson","stepNumber","setStepNumber","showCandidatesJson","highlightGivensJson","highlightSolvableCellsJson","highlightIncorrectCellsJson","darkModeJson","window","matchMedia","matches","add","remove","setIsInGameMode","setShowAnswers","menuIsOpen","setMenuIsOpen","currentGrid","solveGridSteps","solveGrid","console","log","getGridAnswers","prevHistory","initialGrid","currentGridCellValue","nextGridValues","nextValue","Dropdown","show","Toggle","variant","stopPropagation","Menu","Divider","newHistory","step","ReactDOM","render","StrictMode"],"mappings":"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,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,KAClO,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,KAClO,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,IACnO,CAAC,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,IACnO,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,KAClO,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,KAEvO,OAAU,CACN,CAAC,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IACvO,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,KACvO,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,KACtO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,KACtO,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,MAE3O,KAAQ,CACJ,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAC1O,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,KACzO,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,KACzO,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,KACzO,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,KACxO,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,KACxO,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,KACvO,CAAC,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,IAC1O,CAAC,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,KACrO,CAAC,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,KAEvO,OAAU,CACN,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,KACzO,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,KACzO,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,KAC1O,CAAC,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,KAC1O,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,KAC1O,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,KACzO,CAAC,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,IACzO,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,IACxO,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,KACnO,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,KACvO,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,KAC3O,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,IAC5O,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,KACxO,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,IAAI,CAAC,EAAE,GAAG,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","file":"static/js/main.9daff2cb.chunk.js","sourcesContent":["interface CellProps {\n    row: number;\n    column: number;\n    value: number | number[];\n    isGiven: boolean;\n    canBeSolved: boolean;\n    isIncorrect: boolean;\n    hasCandidate: boolean;\n    isInGameMode: boolean;\n    handleClick: (coords: [number, number], e: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\n    handleKeyDown: (coords: [number, number], e: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nfunction Cell(props: CellProps) {\n\n    interface InputAttrsObj {\n        value: number | [];\n        disabled: boolean;\n    }\n\n    const {row, column, value, isGiven, canBeSolved, isIncorrect, hasCandidate, isInGameMode, handleClick, handleKeyDown} = props;\n    const inputAttrs: InputAttrsObj = { value: [], disabled: false };\n    const cellDivClassName = `cell cell-row-${row} cell-column-${column}${ isGiven ? ' given' : '' }${ canBeSolved ? ' can-be-solved' : '' }${ isIncorrect ? ' incorrect' : '' }${ hasCandidate ? ' has-candidate' : '' }`;\n\n    // set 'value' attribute for cell input\n    if (typeof value === 'number') {\n        inputAttrs.value = value;\n    }\n\n    // set 'disabled' attribute for cell input, if a 'given' number\n    if (isGiven && isInGameMode) {\n        inputAttrs.disabled = true;\n    }\n    if (typeof value === 'number' && !isIncorrect && isInGameMode) {\n        inputAttrs.disabled = true;\n    }\n\n    const candidates = [1,2,3,4,5,6,7,8,9].map(function(i) {\n        if (Array.isArray(value) && value.includes(i)) {\n            return <div key={`r${row}c${column}-p${i}`}>{i}</div>\n        } else {\n            return <div key={`r${row}c${column}-p${i}`}></div>\n        }\n    });\n\n    return (\n        <div id={`r${row}c${column}`} className={cellDivClassName}>\n            <input\n                type=\"text\"\n                maxLength={1}\n                pattern=\"[1-9]\"\n                inputMode=\"none\"\n                onChange={() => { /* do nothing */ }}\n                onClick={(e) => handleClick([row, column], e)}\n                onKeyDown={(e) => handleKeyDown([row, column], e)}\n                {...inputAttrs}\n            />\n            {Array.isArray(value) && <div className=\"candidates\">{candidates}</div>}\n        </div>\n    );\n}\n\nexport default Cell;","import { useState, useEffect, useRef } from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport './NumberPad.css';\n\ninterface PositionStylesObj {\n    top: number | string;\n    bottom: number | string;\n    left: number | string;\n    right: number | string;\n}\n\nfunction getNumberPadPosition(activeCell: HTMLDivElement, numberPad: HTMLDivElement): PositionStylesObj {\n    const grid = document.getElementById('grid')!;\n    const gridRect = grid !== null ? grid.getBoundingClientRect() : {x: 0, y: 0, width: 454, height: 454, top: 0, bottom: 454, left:0, right: 454};\n    const gridTop = gridRect.top + document.body.scrollTop;\n    const cellBottom = activeCell.offsetHeight + activeCell.offsetTop + gridTop;\n    const numberPadBottom = cellBottom + numberPad.offsetHeight;\n    const numberPadWidth = numberPad.offsetWidth;\n    const numberPadLeft = activeCell.offsetLeft + (activeCell.offsetWidth/2) - numberPadWidth/2;\n    const numberPadRight = numberPadLeft + numberPadWidth;\n    const windowHeight = document.documentElement.clientHeight;\n    const windowWidth = document.documentElement.clientWidth;\n\n    const positionStyles: PositionStylesObj = {\n        top: activeCell ? activeCell.offsetTop + activeCell.offsetHeight : 0,\n        bottom: 'auto',\n        left: activeCell ? activeCell.offsetLeft + (activeCell.offsetWidth/2) - numberPadWidth/2 : 0,\n        right: 'auto'\n    };\n\n    if (numberPadBottom > windowHeight) {\n        // bottom of number pad would go offscreen bottom\n        positionStyles.top = 'auto';\n        positionStyles.bottom = grid.offsetHeight - activeCell.offsetTop;\n    }\n\n    if (numberPadLeft < 0) {\n        // left of number pad would go offscreen left\n        positionStyles.left = 0;\n    }\n\n    if (numberPadRight > windowWidth) {\n        // right of number pad would go offscreen right\n        positionStyles.left = 'auto';\n        positionStyles.right = 0;\n    }\n\n    return positionStyles;\n    \n}\n\ninterface NumberPadProps {\n    cellClicked: HTMLInputElement | null;\n    handleNumberPadButtonClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    handleCandidateButtonClick: (activeCellValue: number | number[] | null, e: React.ChangeEvent<HTMLInputElement>) => void;\n    hideNumberPad: () => void;\n    isNumberPadActive: boolean;\n    activeCellValue: number | number[] | null;\n    completedGridCellValue: number | number[] | null;\n}\n\nconst NumberPad = (props: NumberPadProps) => {\n\n    const {cellClicked, handleNumberPadButtonClick, handleCandidateButtonClick, hideNumberPad, isNumberPadActive, activeCellValue, completedGridCellValue} = props;\n\n    const [numberPadStyle, setNumberPadStyle] = useState<PositionStylesObj>({\n        top: '-9999px',\n        bottom: 'auto',\n        left: '-9999px',\n        right:'auto'\n    });\n\n    const [manageCandidatesMode, setManageCandidatesMode] = useState(false);\n\n    const activeCell: HTMLDivElement | null = cellClicked ? cellClicked.parentElement as HTMLDivElement : null;\n    const numberPadRef = useRef<HTMLDivElement | null>(null);\n\n    useEffect(() => {\n\n        const grid = document.getElementById('grid')!;\n        const numberPadDiv = numberPadRef.current as HTMLDivElement;\n\n        const handleClick = (e: MouseEvent) => {\n            const buttonTarget = e.target as HTMLButtonElement;\n            if (numberPadDiv.contains(buttonTarget) || grid.contains(buttonTarget)) {\n                // inside click\n                return;\n            }\n            // outside click\n            hideNumberPad();\n        };\n        const handleEscapeKey = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                hideNumberPad();\n            }\n        };\n\n        if (isNumberPadActive && activeCell !== null) {\n            setNumberPadStyle(getNumberPadPosition(activeCell, numberPadDiv));\n        } else {\n            setNumberPadStyle({\n                top: '-9999px',\n                bottom: 'auto',\n                left: '-9999px',\n                right:'auto'\n            });\n        }\n\n        // add event listener for outside click when mounted\n        document.addEventListener('mousedown', handleClick);\n        document.addEventListener('keyup', handleEscapeKey);\n\n        // return functions to be called when unmounted\n        return () => {\n            document.removeEventListener('mousedown', handleClick);\n            document.removeEventListener('keyup', handleEscapeKey);\n        };\n\n    }, [isNumberPadActive, hideNumberPad, activeCell]);\n\n    function createNumberButtons() {\n        const numberButtons = [];\n    \n        for (let i = 1; i < 10; i++) {\n            numberButtons.push(<button type=\"button\" value={i} key={`numpad-${i}`} onClick={handleNumberPadButtonClick}>{i}</button>);\n        }\n    \n        return numberButtons;\n    }\n\n    function createCandidateButtons() {\n        const toggleButtons = [];\n\n        function hasCandidate(i: number) {\n            if (activeCellValue !== null && typeof activeCellValue !== 'number') {\n                return activeCellValue.includes(i);\n            }\n        }\n    \n        for (let i = 1; i < 10; i++) {\n            toggleButtons.push(\n                <ButtonGroup toggle key={`candidate-button-${i}`}>\n                    <ToggleButton\n                        type=\"checkbox\"\n                        value={i}\n                        checked={hasCandidate(i)}\n                        onChange={(e) => {handleCandidateButtonClick(activeCellValue, e)}}\n                    >\n                        {i}\n                    </ToggleButton>\n                </ButtonGroup>\n            );\n        }\n    \n        return toggleButtons;\n    }\n\n    function clearButton() {\n        /*if (activeCell !== null) {\n            const activeCellInput = activeCell.querySelector('input')!;\n            if (activeCellInput.value !== '') {\n                return (\n                    <button\n                        type=\"button\"\n                        value=\"\"\n                        className=\"clear-button\"\n                        onClick={handleNumberPadButtonClick}\n                    >Clear</button>\n                );\n            }\n        }*/\n\n        const buttonElem = (<button\n            type=\"button\"\n            value=\"\"\n            className=\"clear-button\"\n            onClick={handleNumberPadButtonClick}\n        >Clear</button>);\n\n        if (activeCellValue !== null) {\n            if (typeof activeCellValue === 'number' && activeCellValue !== completedGridCellValue) {\n                return buttonElem;\n            }\n            if (Array.isArray(activeCellValue)\n                && typeof completedGridCellValue === 'number'\n                && !activeCellValue.includes(completedGridCellValue)\n            ){\n                return buttonElem;\n            }\n        }\n    }\n\n    function solveButton() {\n        if (activeCell !== null && activeCell.classList.contains('can-be-solved')) {\n            return (\n                <button\n                    type=\"button\"\n                    value=\"\"\n                    className=\"solve-button\"\n                    onClick={handleNumberPadButtonClick}\n                >Solve</button>\n            );\n        }\n    }\n        \n    return (\n        <div\n            className={isNumberPadActive ? 'number-pad active' : 'number-pad'}\n            style={numberPadStyle}\n            ref={numberPadRef}\n        >\n            { manageCandidatesMode === false ? createNumberButtons() : createCandidateButtons() }\n            {clearButton()}\n            {solveButton()}\n\n            <div className=\"form-group form-check\">\n                <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"manage-candidates-mode\"\n                    name=\"manage-candidates-mode\"\n                    checked={manageCandidatesMode}\n                    onChange={(e) => {\n                        setManageCandidatesMode(e.target.checked);\n                    }}\n                />\n                <label htmlFor=\"manage-candidates-mode\" className=\"form-check-label\">\n                    Edit Candidates\n                </label>\n            </div>\n\n        </div>\n    );\n\n};\n\nexport default NumberPad;","import _ from 'lodash';\n\ntype UnitArr = (number | number[])[];\ntype GridArr = UnitArr[];\ntype UnitTypes = 'row' | 'column' | 'nonet';\ntype CellCoords = [number, number];\n\ninterface CellObj {\n    row: number;\n    column: number;\n    value: number | number[];\n}\n\ninterface XWingObj {\n    axis: 'row' | 'column';\n    positions: CellCoords[];\n    value: number\n}\n\nfunction getDiffOfCompletedCells(currentGrid: GridArr, nextGrid: GridArr) {\n    const result = nextGrid.map(function(row, i) {\n        const rowValues = row.map(function(nextValue, j) {\n            const currentValue = currentGrid[i][j];\n            if (Number.isInteger(nextValue) && currentValue !== nextValue) {\n                return nextValue;\n            } else if (Array.isArray(nextValue) && nextValue.length === 1 && currentValue !== nextValue) {\n                return nextValue;\n            } else {\n                return [];\n            }\n        });\n        return rowValues;\n    });\n    return result;\n}\n\nfunction getGridNextAnswers(grid: GridArr) {\n    return solveCells(solveNonets(reduceCandidatesXWing(removeNakeds(initReduceCandidates(grid)))));\n}\n\nfunction getGridAnswers(grid: GridArr) {\n    let completedGrid: GridArr = [];\n    let solveGridSteps = 0;\n\n    function solveGrid(grid: GridArr) {\n        solveGridSteps++;\n        if (verifyCompletedGrid(grid) === true) {\n            return;\n        } else if (solveGridSteps > 81) {\n            console.log('Cannot solve sudoku puzzle');\n            return;\n        } else {\n            completedGrid = getGridNextAnswers(grid);\n            solveGrid(completedGrid);\n        }\n    }\n    solveGrid(grid);\n    return completedGrid;\n}\n\nfunction updateGrid(grid: GridArr, updatedCells: CellObj[]) {\n    const updatedGrid = _.cloneDeep(grid);\n    updatedCells.forEach(function(cell: CellObj) {\n        updatedGrid[cell.row][cell.column] = cell.value;\n    });\n    return updatedGrid;\n}\n\nfunction generateNonet(grid: GridArr, topLeftCellRow: number, topLeftCellCol: number) {\n    let nonet: UnitArr = [];\n\n    for (let i = topLeftCellRow; i < topLeftCellRow + 3; i++) {\n        for (let j = topLeftCellCol; j < topLeftCellCol + 3; j++) {\n            nonet.push(grid[i][j]);\n        }\n    }\n\n    return nonet;\n}\n\nfunction getCellValue(grid: GridArr, row: number, column: number) {\n    return grid[row][column];\n}\n\nfunction getRowValues(grid: GridArr, row: number) {\n    let rowValues: UnitArr = [];\n    grid[row].forEach(function(value) {\n        rowValues.push(value);\n    });\n    return rowValues;\n}\n\nfunction getColumnValues(grid: GridArr, column: number) {\n    let columnValues: UnitArr = [];\n    grid.forEach(function(row) {\n        columnValues.push(row[column]);\n    });\n    return columnValues;\n}\n\nfunction getNonetValues(grid: GridArr, row: number, column: number) {\n\n    // sqr1\n    if (row <= 2 && column <= 2) {\n        return generateNonet(grid, 0,0);\n    }\n\n    // sqr2\n    if (row <= 2 && (column >= 3 && column <= 5)) {\n        return generateNonet(grid, 0,3);\n    }\n\n    // sqr3\n    if (row <= 2 && column >= 6) {\n        return generateNonet(grid, 0,6);\n    }\n\n    // sqr4\n    if ((row >= 3 && row <= 5) && column <= 2) {\n        return generateNonet(grid, 3,0);\n    }\n\n    // sqr5\n    if ((row >= 3 && row <= 5) && (column >= 3 && column <= 5)) {\n        return generateNonet(grid, 3,3);\n    }\n\n    // sqr6\n    if ((row >= 3 && row <= 5) && column >= 6) {\n        return generateNonet(grid, 3,6);\n    }\n\n    // sqr7\n    if (row >= 6 && column <= 2) {\n        return generateNonet(grid, 6,0);\n    }\n\n    // sqr8\n    if (row >= 6 && (column >= 3 && column <= 5)) {\n        return generateNonet(grid, 6,3);\n    }\n\n    // sqr9\n    // row >= 6 && column >= 6\n    return generateNonet(grid, 6,6);\n\n}\n\nfunction getNonetRowsCols(rowOrCol: number) {\n\n    // rowOrCol === 0 || rowOrCol === 3 || rowOrCol === 6\n    let rowOrCol1 = rowOrCol,\n        rowOrCol2 = rowOrCol + 1,\n        rowOrCol3 = rowOrCol + 2;\n\n    if (rowOrCol === 1 || rowOrCol === 4 || rowOrCol === 7) {\n        rowOrCol1 = rowOrCol - 1;\n        rowOrCol2 = rowOrCol;\n        rowOrCol3 = rowOrCol + 1;\n    }\n    if (rowOrCol === 2 || rowOrCol === 5 || rowOrCol === 8) {\n        rowOrCol1 = rowOrCol - 2;\n        rowOrCol2 = rowOrCol - 1;\n        rowOrCol3 = rowOrCol;\n    }\n\n    return [rowOrCol1, rowOrCol2, rowOrCol3];\n}\n\nfunction isCellSolved (grid: GridArr, row: number, column: number) {\n    if (typeof grid[row][column] === 'number') {\n        return true;\n    }\n}\n\nfunction isCleanValue(value: number | number[]) {\n    // check if the value is an empty array\n    if (Array.isArray(value) && value.length === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction crosshatchNonet (grid: GridArr, row: number, column: number) {\n\n    const nonetValues = getNonetValues(grid, row, column);\n    const candidates = [1,2,3,4,5,6,7,8,9].filter(function(value) {\n        return !(nonetValues.includes(value));\n    });\n    let newCandidates: number[][] = [];\n    const nonetRows = getNonetRowsCols(row);\n    const nonetColumns = getNonetRowsCols(column);\n\n    candidates.forEach(function(candidate) {\n\n        const temporaryNonetValues: (number | 'o' | 'x')[] = nonetValues.map(function(value) {\n            if (Array.isArray(value)) {\n                return \"o\";\n            } else {\n                return value;\n            }\n        });\n\n        temporaryNonetValues.forEach(function(value, index) {\n            let nonetRowValues;\n            let nonetColumnValues;\n\n            if (index <= 2) {\n                nonetRowValues = getRowValues(grid, nonetRows[0]);\n            }\n            if (index >=3 && index <=5) {\n                nonetRowValues = getRowValues(grid, nonetRows[1]);\n            }\n            // index >= 6\n            nonetRowValues = getRowValues(grid, nonetRows[2]);\n\n            if (index === 0 || index === 3 || index === 6) {\n                nonetColumnValues = getColumnValues(grid, nonetColumns[0]);\n            }\n            if (index === 1 || index === 4 || index === 7) {\n                nonetColumnValues = getColumnValues(grid, nonetColumns[1]);\n            }\n            // index === 2 || index === 5 || index === 8\n            nonetColumnValues = getColumnValues(grid, nonetColumns[2]);\n            \n\n            if (value === 'o') {\n                if (nonetRowValues.includes(candidate)) {\n                    temporaryNonetValues[index] = 'x';\n                }\n                if (nonetColumnValues.includes(candidate)) {\n                    temporaryNonetValues[index] = 'x';\n                }\n            }\n\n        });\n\n        let emptyCount = 0;\n\n        temporaryNonetValues.forEach(function(value) {\n            if (value === 'o') {\n                emptyCount++;\n            }\n        });\n\n        const gridCell: CellCoords = nonetValuesArrayIndexToGridCell(temporaryNonetValues.indexOf('o'), row, column);\n\n        if (emptyCount === 1) {\n            newCandidates.push([gridCell[0], gridCell[1], candidate]);\n        }\n        \n    });\n\n    if (newCandidates.length === 1) {\n        return {\n            row: newCandidates[0][0],\n            column: newCandidates[0][1],\n            value: newCandidates[0][2]\n        };\n    } \n\n}\n\nfunction nonetValuesArrayIndexToGridCell(nonetValuesIndex: number, nonetTopLeftSqRow: number, nonetTopLeftSqCol: number): CellCoords {\n    let gridCellRow = nonetTopLeftSqRow;\n    let gridCellCol = nonetTopLeftSqCol;\n\n    if (nonetValuesIndex === 1) {\n        gridCellCol = nonetTopLeftSqCol + 1;\n    }\n    if (nonetValuesIndex === 2) {\n        gridCellCol = nonetTopLeftSqCol + 2;\n    }\n    if (nonetValuesIndex === 3) {\n        gridCellRow = nonetTopLeftSqRow + 1;\n    }\n    if (nonetValuesIndex === 4) {\n        gridCellRow = nonetTopLeftSqRow + 1;\n        gridCellCol = nonetTopLeftSqCol + 1;\n    }\n    if (nonetValuesIndex === 5) {\n        gridCellRow = nonetTopLeftSqRow + 1;\n        gridCellCol = nonetTopLeftSqCol + 2;\n    }\n    if (nonetValuesIndex === 6) {\n        gridCellRow = nonetTopLeftSqRow + 2;\n    }\n    if (nonetValuesIndex === 7) {\n        gridCellRow = nonetTopLeftSqRow + 2;\n        gridCellCol = nonetTopLeftSqCol + 1;\n    }\n    if (nonetValuesIndex === 8) {\n        gridCellRow = nonetTopLeftSqRow + 2;\n        gridCellCol = nonetTopLeftSqCol + 2;\n    }\n\n    return [gridCellRow, gridCellCol];\n}\n\nfunction solveNonets(grid: GridArr) {\n    const solvedCells = [];\n    for (let row = 0; row <= 6; row = row + 3) {\n        for (let col = 0; col <= 6; col = col + 3) {\n            const cell = crosshatchNonet(grid, row, col);\n            if (cell !== undefined) {\n                solvedCells.push(cell);\n            }\n        }\n    }\n    const updatedGrid = updateGrid(grid, solvedCells);\n\n    return setCandidates(updatedGrid);\n}\n\nfunction getCandidates(grid: GridArr, row: number, column: number) {\n\n    const allValues = Array.from(new Set(getNonetValues(grid, row, column).concat(getRowValues(grid, row)).concat(getColumnValues(grid, column)))).filter(function(value) {\n        return typeof value === 'number' || (Array.isArray(value) && value.length !== 0);\n    });\n\n    let startingCandidates: number | number[];\n\n    if (isCleanValue(grid[row][column])) {\n        startingCandidates = [1,2,3,4,5,6,7,8,9];\n    } else {\n        startingCandidates = grid[row][column];\n    }\n    \n    let candidates: number | number[];\n\n    if (Array.isArray(startingCandidates)) {\n        candidates = startingCandidates.filter(function(value) {\n            return !(allValues.includes(value));\n        })\n    } else {\n        candidates = startingCandidates;\n    }\n\n    return candidates;\n\n}\n\n/*\nnaked triple\nthree cells in a block, row, or column having only the same three candidates, or their subset\nall other appearances of the same candidates can be eliminated if they are in the same block, row, or column\n[[6,8], [4,6], [4,8], ...cells w/candidates...]\n\nnaked quad\nfour cells in a block, row, or column having only the same four candidates, or their subset\nall other appearances of the same candidates can be eliminated if they are in the same block, row, or column\n[[2,8], [6,8], [2,6,8,9], [6,8,9], ...cells w/candidates...]\n\n*/\n\nfunction findNakeds(quantity: number, unitValues: UnitArr) {\n\n    let tempUnitValues: UnitArr = unitValues.slice(0);\n    let cellsWithSameCandidates = 0;\n    let result: number[] = [];\n\n    function findNakedsStep(arrayOfValues: UnitArr) {\n\n        const cellsWithCandidates = arrayOfValues.filter(function(value) {\n            return Array.isArray(value);\n        });\n        let lastGoodValue: number[] = [];\n        let cellsToExcludeCount = 0;\n        cellsWithSameCandidates = 0;\n\n        result = arrayOfValues.reduce(function(accumulator: number[], currentValue) {\n\n            if (Array.isArray(currentValue)) {\n\n                const combined = Array.from(new Set(accumulator.concat(currentValue)));\n\n                if (combined.length > quantity) {\n                    cellsToExcludeCount++;\n                    cellsWithSameCandidates = cellsWithCandidates.length - cellsToExcludeCount;\n                    return lastGoodValue;\n                } else {\n                    cellsWithSameCandidates = cellsWithCandidates.length - cellsToExcludeCount;\n                    lastGoodValue = combined;\n                    return combined;\n                }\n\n            } else {\n                return accumulator;\n            }\n\n        }, []);\n\n    }\n\n    while (tempUnitValues.length > 0) {\n        if (cellsWithSameCandidates === quantity && result.length === quantity) {\n            return result;\n        } else {\n            findNakedsStep(tempUnitValues);\n            tempUnitValues.shift();\n        }\n    }\n\n}\n\ninterface UnitIndexesObj {\n    row?: number;\n    column?: number;\n}\n\nfunction removeNakedsFromUnit(nakeds: number[] | undefined, unitValues: UnitArr, unitIndexes: UnitIndexesObj, unitType: UnitTypes) {\n\n    const results: CellObj[] = [];\n\n    if (nakeds) {\n        unitValues.forEach(function(cellValue: number | number[], index: number) {\n            if (Array.isArray(cellValue)) {\n                const differentCandidates = cellValue.filter(function(value) {\n                    return !nakeds.includes(value);\n                });\n                //differentCandidates.filter(candidate => nakeds.includes(candidate));\n                if (differentCandidates.length !== 0 && !_.isEqual(differentCandidates, cellValue)) {\n                    if (unitType === 'row') {\n                        results.push({\n                            row: unitIndexes.row as number,\n                            column: index,\n                            value: differentCandidates\n                        });\n                    }\n                    if (unitType === 'column') {\n                        results.push({\n                            row: index,\n                            column: unitIndexes.column as number,\n                            value: differentCandidates\n                        });\n                    }\n                    if (unitType === 'nonet') {\n                        const gridCell = nonetValuesArrayIndexToGridCell(index, unitIndexes.row as number, unitIndexes.column as number);\n                        results.push({\n                            row: gridCell[0],\n                            column: gridCell[1],\n                            value: differentCandidates\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    if (results.length !== 0) {\n        return results;\n    }\n\n}\n\nfunction removeNakeds(grid: GridArr) {\n\n    const results = [];\n    const gridClone = _.cloneDeep(grid);\n\n    gridClone.forEach(function(rowValues, rowIndex) {\n        const removeNakeds3 = removeNakedsFromUnit(findNakeds(3, rowValues), rowValues, { 'row': rowIndex }, 'row');\n        const removeNakeds4 = removeNakedsFromUnit(findNakeds(4, rowValues), rowValues, { 'row': rowIndex }, 'row');\n\n        if (removeNakeds3 !== undefined) {\n            results.push(...removeNakeds3);\n            removeNakeds3.forEach(function(updatedCell: CellObj) {\n                gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n            });\n        }\n        if (removeNakeds4 !== undefined) {\n            results.push(...removeNakeds4);\n            removeNakeds4.forEach(function(updatedCell: CellObj) {\n                gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n            });\n        }\n\n    });\n\n    gridClone[0].forEach(function(column, columnIndex) {\n        const columnValues = getColumnValues(gridClone, columnIndex);\n        const removeNakeds3 = removeNakedsFromUnit(findNakeds(3, columnValues), columnValues, { 'column': columnIndex }, 'column');\n        const removeNakeds4 = removeNakedsFromUnit(findNakeds(4, columnValues), columnValues, { 'column': columnIndex }, 'column');\n\n        if (removeNakeds3 !== undefined) {\n            results.push(...removeNakeds3);\n            removeNakeds3.forEach(function(updatedCell: CellObj) {\n                gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n            });\n        }\n        if (removeNakeds4 !== undefined) {\n            results.push(...removeNakeds4);\n            removeNakeds4.forEach(function(updatedCell: CellObj) {\n                gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n            });\n        }\n    });\n\n    for (let rowIndex = 0; rowIndex <= 6; rowIndex = rowIndex + 3) {\n        for (let columnIndex = 0; columnIndex <= 6; columnIndex = columnIndex + 3) {\n            const nonetValues = getNonetValues(gridClone, rowIndex, columnIndex);\n            const removeNakeds3 = removeNakedsFromUnit(findNakeds(3, nonetValues), nonetValues, { 'row': rowIndex,'column': columnIndex }, 'nonet');\n            const removeNakeds4 = removeNakedsFromUnit(findNakeds(4, nonetValues), nonetValues, { 'row': rowIndex, 'column': columnIndex }, 'nonet');\n\n            if (removeNakeds3 !== undefined) {\n                results.push(...removeNakeds3);\n                removeNakeds3.forEach(function(updatedCell) {\n                    gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n                });\n            }\n            if (removeNakeds4 !== undefined) {\n                results.push(...removeNakeds4);\n                removeNakeds4.forEach(function(updatedCell: CellObj) {\n                    gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n                });\n            }\n        }\n    }\n\n    return updateGrid(grid, results);\n\n}\n\n/*\nx-wing\nCandidate appears twice in two different rows (or columns), and those appearances are both in the same column (or row). The candidate appears in four cells that form a square or rectangle. The candidate can only appear in two of the four cells. The two positions have to be diagonal opposites forming an X (hence the name). Safe to eliminate the candidate from other appearances in the cross axis. For example, if the candidate appears twice in two different rows, remove the candidate from the cells of the shared columns.\n*/\n\nfunction findXWings(grid: GridArr) {\n\n    let xWings: XWingObj[] = [];\n\n    function examineUnit(unitValues: UnitArr, unitIndex: number, mainAxis: 'row' | 'column') {\n\n        let candidatesExamined: number[] = [];\n        let unitResults: XWingObj[] = [];\n\n        unitValues.forEach(function(cellValue: number | number[], cellIndex: number) {\n            if (Array.isArray(cellValue)) {\n                cellValue.forEach(function(candidateValue) {\n\n                    let count = 0;\n                    let candidatePositions: CellCoords[] = [];\n\n                    unitValues.forEach(function(cellValueForComparison, cellIndexForComparison) {\n                        if (Array.isArray(cellValueForComparison)) {\n                            if (cellIndexForComparison > cellIndex) {\n                                if (!candidatesExamined.includes(candidateValue)) {\n\n                                    if (cellValueForComparison.includes(candidateValue)) {\n                                        count++;\n\n                                        if (mainAxis === 'row') {\n                                            candidatePositions.push([unitIndex, cellIndex]);\n                                            candidatePositions.push([unitIndex, cellIndexForComparison]);\n                                        }\n                                        if (mainAxis === 'column') {\n                                            candidatePositions.push([cellIndex, unitIndex]);\n                                            candidatePositions.push([cellIndexForComparison, unitIndex]);\n                                        }\n\n                                    }\n                                }\n                            }\n                        }\n                    });\n                    if (count === 1) {\n                        unitResults.push({\n                            'axis': mainAxis,\n                            'positions': candidatePositions,\n                            'value': candidateValue\n                        });\n                    }\n                    candidatesExamined.push(candidateValue);\n                });\n            }\n        });\n\n        unitResults.forEach(function(candidateCellPair) {\n            // look for same candidate value in the same cross axis units (rows or columns)\n\n            function findOtherCandidatePair(unit: UnitArr, unitIndex: number) {\n\n                // mainAxis === 'row'\n                let candidatePairUnitIndex = candidateCellPair.positions[0][0];\n                let cellACrossAxisIndex = candidateCellPair.positions[0][1];\n                let cellBCrossAxisIndex = candidateCellPair.positions[1][1];\n\n                if (mainAxis === 'column') {\n                    candidatePairUnitIndex = candidateCellPair.positions[0][1];\n                    cellACrossAxisIndex = candidateCellPair.positions[0][0];\n                    cellBCrossAxisIndex = candidateCellPair.positions[1][0];\n                }\n\n                let cellAValue = unit[cellACrossAxisIndex];\n                let cellBValue = unit[cellBCrossAxisIndex];\n\n                let count = 0;\n                let newCandidatePositions: CellCoords[] = [];\n\n                if (unitIndex > candidatePairUnitIndex) {\n                    if (Array.isArray(cellAValue) && Array.isArray(cellBValue)) {\n                        if (cellAValue.includes(candidateCellPair.value) && cellBValue.includes(candidateCellPair.value)) {\n\n                            unit.forEach(function(cellValue) {\n                                if (Array.isArray(cellValue)) {\n                                    if (cellValue.includes(candidateCellPair.value)) {\n                                        count++;\n                                    }\n                                }\n                            });\n\n                            if (count === 2) {\n\n                                if (mainAxis === 'row') {\n                                    newCandidatePositions.push([unitIndex, cellACrossAxisIndex]);\n                                    newCandidatePositions.push([unitIndex, cellBCrossAxisIndex]);\n                                }\n                                if (mainAxis === 'column') {\n                                    newCandidatePositions.push([cellACrossAxisIndex, unitIndex]);\n                                    newCandidatePositions.push([cellBCrossAxisIndex, unitIndex]);\n                                }\n\n                                const fourPositionsOfCandidate = candidateCellPair.positions.concat(newCandidatePositions);\n\n                                xWings.push({\n                                    'axis': candidateCellPair.axis,\n                                    'positions': fourPositionsOfCandidate,\n                                    'value': candidateCellPair.value\n                                });\n\n                            }\n\n                        }\n                    }\n                }\n\n            }\n\n            if (mainAxis === 'row') {\n\n                grid.forEach(function(unit, unitIndex) {\n                    findOtherCandidatePair(unit, unitIndex);\n                });\n\n            }\n            if (mainAxis === 'column') {\n\n                grid[0].forEach(function(unit, unitIndex) {\n                    const unitValues = getColumnValues(grid, unitIndex);\n                    findOtherCandidatePair(unitValues, unitIndex);\n                });\n\n            }\n\n        });\n\n    }\n\n    function getColumnValues(grid: GridArr, column: number) {\n        let columnValues: UnitArr = [];\n        grid.forEach(function(row) {\n            columnValues.push(row[column]);\n        });\n        return columnValues;\n    }\n\n    // Check rows\n    grid.forEach(function(row, index) {\n        examineUnit(row, index, 'row');\n    });\n\n    // Check columns\n    grid[0].forEach(function(column, index) {\n        examineUnit(getColumnValues(grid, index), index, 'column');\n    });\n\n    return xWings;\n\n}\n\nfunction reduceCandidatesXWing(grid: GridArr) {\n\n    const gridClone = _.cloneDeep(grid);\n    const xWings = findXWings(gridClone);\n    const results: CellObj[] = [];\n\n    xWings.forEach(function(xWing: XWingObj) {\n\n        let xWingRows = xWing.positions.map(function(position) {\n            return position[0];\n        });\n        xWingRows = xWingRows.filter(function(rowPosition, index: number) {\n            return xWingRows.indexOf(rowPosition) === index;\n        });\n\n        let xWingColumns = xWing.positions.map(function(position) {\n            return position[1];\n        });\n        xWingColumns = xWingColumns.filter(function(columnPosition, index: number) {\n            return xWingColumns.indexOf(columnPosition) === index;\n        });\n\n        if (xWing.axis === 'column') {\n\n            xWingRows.forEach(function(xWingRow: number) {\n                const rowValues = getRowValues(gridClone, xWingRow);\n                rowValues.forEach(function(cellValue, index) {\n                    if (!xWingColumns.includes(index)) {\n                        if (Array.isArray(cellValue)) {\n                            const candidatesToRemove = removeCandidateFromCell(gridClone, xWingRow, index, xWing.value);\n                            if (candidatesToRemove !== undefined) {\n                                results.push(candidatesToRemove);\n                                gridClone[candidatesToRemove.row][candidatesToRemove.column] = candidatesToRemove.value;\n                            }\n                        }\n                    }\n                });\n            });\n            \n        }\n\n        if (xWing.axis === 'row') {\n\n            xWingColumns.forEach(function(xWingColumn: number) {\n                const columnValues = getColumnValues(gridClone, xWingColumn);\n                columnValues.forEach(function(cellValue, index) {\n                    if (!xWingRows.includes(index)) {\n                        if (Array.isArray(cellValue)) {\n                            const candidatesToRemove = removeCandidateFromCell(gridClone, index, xWingColumn, xWing.value);\n                            if (candidatesToRemove !== undefined) {\n                                results.push(candidatesToRemove);\n                                gridClone[candidatesToRemove.row][candidatesToRemove.column] = candidatesToRemove.value;\n                            }\n                        }\n                    }\n                });\n            });\n            \n        }\n\n    });\n\n    return updateGrid(grid, results);\n\n}\n\nfunction removeCandidateFromCell(grid: GridArr, row: number, column: number, value: number) {\n    const cellValue = getCellValue(grid, row, column);\n\n    if (Array.isArray(cellValue) && cellValue.includes(value)) {\n        const cellValueResult = cellValue.filter(function(candidate) {\n            return candidate !== value;\n        });\n        //controller.updateCell(row, column, cellValueResult);\n        return {\n            row: row,\n            column: column,\n            value: cellValueResult\n        };\n    }\n}\n\nfunction initReduceCandidates(grid: GridArr) {\n    const results: CellObj[] = [];\n    const gridClone = _.cloneDeep(grid);\n\n    for (let row = 0; row <= 6; row = row + 3) {\n        for (let col = 0; col <= 6; col = col + 3) {\n            const reducedCandidatesRow = reduceCandidates(gridClone, row, col, 'row');\n            const reducedCandidatesColumn = reduceCandidates(gridClone, row, col, 'column');\n            if (reducedCandidatesRow !== undefined) {\n                results.push(...reducedCandidatesRow);\n                reducedCandidatesRow.forEach(function(updatedCell) {\n                    gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n                });\n            }\n            if (reducedCandidatesColumn !== undefined) {\n                results.push(...reducedCandidatesColumn);\n                reducedCandidatesColumn.forEach(function(updatedCell) {\n                    gridClone[updatedCell.row][updatedCell.column] = updatedCell.value;\n                });\n            }\n        }\n    }\n    return updateGrid(grid, results);\n}\n\nfunction reduceCandidates(grid: GridArr, row: number, column: number, direction: 'row' | 'column') {\n\n    // row and column = the nonet's top left cell, for example 0,0 and 0,3 and 3,6, etc.\n    // if direction = row, main axis = row, cross axis = column\n    // if direction = column, main axis = column, cross axis = row\n\n    // If a nonet has candidates that only exist in a row or column within the nonet, remove those candidates from other cells in the same row or column outside the nonet.\n    // For example: [6, 8, 3, [1,2], [1,2], 9, 7, 4, 5] <- nonetValues; 1s and 2s in the same row\n    // For example: [9, 6, [1,4,5], 7, 3, [1,4,5], [1,5], 2, 8] <- nonetValues; 4s in the same column\n\n    const nonetValues = getNonetValues(grid, row, column);\n    const results: CellObj[] = [];\n\n    const nonetMainAxisSet1 = nonetValues.filter(function(value, index) {\n        if (direction === 'row') {\n            return index <= 2;\n        } else {\n            // direction === 'column'\n            return index === 0 || index === 3 || index === 6;\n        }\n    }).filter(function(value): value is number[] {\n        return Array.isArray(value);\n    });\n\n    const nonetMainAxisSet2 = nonetValues.filter(function(value, index) {\n        if (direction === 'row') {\n            return index >=3 && index <=5;\n        } else {\n            // direction === 'column'\n            return index === 1 || index === 4 || index === 7;\n        }\n    }).filter(function(value): value is number[] {\n        return Array.isArray(value);\n    });\n\n    const nonetMainAxisSet3 = nonetValues.filter(function(value, index) {\n        if (direction === 'row') {\n            return index >= 6;\n        } else {\n            // direction === 'column'\n            return index === 2 || index === 5 || index === 8;\n        }\n    }).filter(function(value): value is number[] {\n        return Array.isArray(value);\n    });\n\n    const nonetMainAxisSets = [nonetMainAxisSet1, nonetMainAxisSet2, nonetMainAxisSet3];\n    let allCandidatesInCrossAxisSets: number[][] = [];\n\n    nonetMainAxisSets.forEach(function(nonetMainAxisSet) {\n        if (nonetMainAxisSet.length === 0) {\n            allCandidatesInCrossAxisSets.push([]);\n        } else {\n            let allCandidatesInMainAxisSet = nonetMainAxisSet.reduce(function(accumulator, current) {\n                return accumulator.concat(current);\n            }, []);\n            allCandidatesInMainAxisSet = Array.from(new Set(allCandidatesInMainAxisSet));\n            allCandidatesInCrossAxisSets.push(allCandidatesInMainAxisSet);\n        }\n    });\n\n    allCandidatesInCrossAxisSets.forEach(function(allCandidatesInMainAxisSet, index) {\n\n        // index === 0\n        let otherMainAxisSet1 = index + 1;\n        let otherMainAxisSet2 = index + 2;\n\n        if (index === 1) {\n            otherMainAxisSet1 = index - 1;\n            otherMainAxisSet2 = index + 1;\n        }\n        if (index === 2) {\n            otherMainAxisSet1 = index - 2;\n            otherMainAxisSet2 = index - 1;\n        }\n\n        const allCandidatesUniqueToMainAxisSet = allCandidatesInMainAxisSet.filter(function(value) {\n            const otherNonetMainAxisSetsValues = nonetMainAxisSets[otherMainAxisSet1].concat(nonetMainAxisSets[otherMainAxisSet2]).reduce(function(accumulator, current) {\n                return accumulator.concat(current);\n            }, []);\n            return !otherNonetMainAxisSetsValues.includes(value);\n        });\n\n        let gridMainAxisSetIndex: number;\n        let gridMainAxisSetValues: UnitArr;\n        let indexesToInclude: [number, number, number, number, number, number];\n\n        if (direction === 'row') {\n            gridMainAxisSetIndex = row + index;\n            gridMainAxisSetValues = getRowValues(grid, gridMainAxisSetIndex);\n\n            if (column === 0) {\n                indexesToInclude = [3, 4, 5, 6, 7, 8];\n            }\n            if (column === 3) {\n                indexesToInclude = [0, 1, 2, 6, 7, 8];\n            }\n            if (column === 6) {\n                indexesToInclude = [0, 1, 2, 3, 4, 5];\n            }\n        } else {\n            // direction === 'column'\n            gridMainAxisSetIndex = column + index;\n            gridMainAxisSetValues = getColumnValues(grid, gridMainAxisSetIndex);\n\n            if (row === 0) {\n                indexesToInclude = [3, 4, 5, 6, 7, 8];\n            }\n            if (row === 3) {\n                indexesToInclude = [0, 1, 2, 6, 7, 8];\n            }\n            if (row === 6) {\n                indexesToInclude = [0, 1, 2, 3, 4, 5];\n            }\n        }\n\n        gridMainAxisSetValues.forEach(function(cellValue, gridCrossAxisSetIndex) {\n            if (indexesToInclude.includes(gridCrossAxisSetIndex)) {\n                if (Array.isArray(cellValue) && cellValue.length > 1) {\n                    const newCandidates = cellValue.filter(function(value) {\n                        return !allCandidatesUniqueToMainAxisSet.includes(value);\n                    });\n                    if (direction === 'row') {\n                        if (newCandidates.length < cellValue.length) {\n                            results.push({\n                                row: gridMainAxisSetIndex,\n                                column: gridCrossAxisSetIndex,\n                                value: newCandidates\n                            });\n                        }\n                    }\n                    if (direction === 'column') {\n                        if (newCandidates.length < cellValue.length) {\n                            results.push({\n                                row: gridCrossAxisSetIndex,\n                                column: gridMainAxisSetIndex,\n                                value: newCandidates\n                            });\n                        }\n                    }\n                    \n                }\n            }\n        });\n\n    });\n\n    if (results.length !== 0) {\n        return results;\n    }\n\n}\n\nfunction solveCell(grid: GridArr, row: number, column: number) {\n\n    if (!(isCellSolved(grid, row, column))) {\n\n        const candidates = getCandidates(grid, row, column);\n        let newCandidates: number[] = [];\n\n        // if a single candidate works, store that value\n        if (Array.isArray(candidates) && candidates.length === 1) {    \n            return {\n                row: row,\n                column: column,\n                value: candidates[0]\n            };\n        }\n\n        const rowArrayValues: UnitArr = getRowValues(grid, row).filter(function(value, index) {\n            return index !== column;\n        }).filter(function(value) {\n            return Array.isArray(value) && value.length !== 0;\n        });\n\n        const columnArrayValues: UnitArr = getColumnValues(grid, column).filter(function(value, index) {\n            return index !== row;\n        }).filter(function(value) {\n            return Array.isArray(value) && value.length !== 0;\n        });\n\n        if (rowArrayValues.length && Array.isArray(candidates)) {\n            // if one of the candidates doesn't exist in any rowArrayValues,\n            // add that value to newCandidates array\n            candidates.forEach(function(candidate) {\n                \n                const candidateInSomeArray = rowArrayValues.some(function(arrayValue) {\n                    if (Array.isArray(arrayValue)) {\n                        return arrayValue.includes(candidate);\n                    }\n                    else if (arrayValue === candidate) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                });\n\n                if (candidateInSomeArray) {\n                    // do nothing, the candidate exists as a candidate for another cell in the same row\n                } else {\n                    newCandidates.push(candidate);\n                }\n                \n            });\n        }\n\n        if (columnArrayValues.length && Array.isArray(candidates)) {\n            // if one of the candidates doesn't exist in any columnArrayValues,\n            // add that value to newCandidates array\n            candidates.forEach(function(candidate) {\n                \n                const candidateInSomeArray = columnArrayValues.some(function(arrayValue) {\n                    if (Array.isArray(arrayValue)) {\n                        return arrayValue.includes(candidate);\n                    } else if (arrayValue === candidate) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                    \n                });\n\n                if (candidateInSomeArray) {\n                    // do nothing, the candidate exists as a candidate for another cell in the same column\n                } else {\n                    newCandidates.push(candidate);\n                }\n                \n            });\n        }\n\n        newCandidates = Array.from(new Set(newCandidates));\n\n        if (newCandidates.length === 1) {\n            return {\n                row: row,\n                column: column,\n                value: newCandidates[0]\n            };\n        }\n        if (newCandidates.length > 1) {\n            return {\n                row: row,\n                column: column,\n                value: newCandidates\n            };\n        }\n        \n    } // end if\n\n}\n\nfunction setCandidates(grid: GridArr) {\n    const cellsWithCandidates: CellObj[] = [];\n    grid.forEach(function(row, i) {\n        row.forEach(function(column, j) {\n            if (!(isCellSolved(grid, i, j))) {\n                const cellValue = getCandidates(grid, i, j);\n                if (cellValue !== undefined) {\n                    cellsWithCandidates.push({\n                        row: i,\n                        column: j,\n                        value: cellValue\n                    });\n                }\n            }\n        });\n    });\n    return updateGrid(grid, cellsWithCandidates);\n}\n\nfunction solveCells(grid: GridArr) {\n    const solvedCells: CellObj[] = [];\n    grid.forEach(function(row, i) {\n        row.forEach(function(column, j) {\n            if (!(isCellSolved(grid, i, j))) {\n                const cell = solveCell(grid, i, j);\n                if (cell !== undefined) {\n                    solvedCells.push(cell);\n                }\n            }\n        });\n    });\n    const updatedGrid = updateGrid(grid, solvedCells);\n\n    return setCandidates(updatedGrid);\n}\n\nfunction verifyCompletedGrid(grid: GridArr) {\n    const gridColumns: UnitArr[] = [];\n    const gridNonets: UnitArr[] = [];\n\n    // Check rows\n    const allRowsIncludeAllValues = grid.every(function(row) {\n        return row.every(function(value) {\n            if (typeof value === 'number') {\n                return [1,2,3,4,5,6,7,8,9].includes(value);\n            } else {\n                return false;\n            }\n        });\n    });\n\n    // Check columns\n    grid[0].forEach(function(column, index) {\n        gridColumns.push(getColumnValues(grid, index));\n    });\n\n    const allColumnsIncludeAllValues = gridColumns.every(function(column) {\n        return column.every(function(value) {\n            if (typeof value === 'number') {\n                return [1,2,3,4,5,6,7,8,9].includes(value);\n            } else {\n                return false;\n            }\n        });\n    });\n\n    // Check nonets\n    for (let row = 0; row <= 6; row = row + 3) {\n        for (let col = 0; col <= 6; col = col + 3) {\n            gridNonets.push(getNonetValues(grid, row, col));\n        }\n    }\n\n    const allNonetsIncludeAllValues = gridNonets.every(function(nonet) {\n        return nonet.every(function(value) {\n            if (typeof value === 'number') {\n                return [1,2,3,4,5,6,7,8,9].includes(value);\n            } else {\n                return false;\n            }\n        });\n    });\n\n    if (allRowsIncludeAllValues && allColumnsIncludeAllValues && allNonetsIncludeAllValues) {\n        return true;\n    }\n\n}\n\nexport { setCandidates, solveCells, solveNonets, removeNakeds, reduceCandidatesXWing, initReduceCandidates, verifyCompletedGrid, getGridNextAnswers, getGridAnswers, getDiffOfCompletedCells };\n","import React, { useState } from 'react';\nimport Cell from './Cell';\nimport NumberPad from './NumberPad';\nimport {setCandidates} from './logic';\nimport _ from 'lodash';\nimport './Grid.css';\n\ntype GridArr = (number | number[])[][];\n\ninterface GridProps {\n    currentGridValues: GridArr;\n    currentGridNoIncorrect: GridArr;\n    completedGrid: GridArr; /* In a perfect world, would be number[] */\n    updateGame: (updatedGrid: GridArr) => void; \n    givens: GridArr;\n    nextPossibleAnswers: GridArr;\n    showCandidates: boolean;\n    highlightGivens: boolean;\n    highlightSolvableCells: boolean;\n    highlightIncorrectCells: boolean;\n    highlightCellValue: string;\n    isInGameMode: boolean;\n    showAnswers: boolean;\n}\n\nfunction Grid(props: GridProps) {\n\n    const {currentGridValues, currentGridNoIncorrect, completedGrid, updateGame, givens, nextPossibleAnswers, showCandidates, highlightGivens, highlightSolvableCells, highlightIncorrectCells, highlightCellValue, isInGameMode, showAnswers} = props;\n    const [cellClicked, setCellClicked] = useState<null | HTMLInputElement>(null);\n    const [activeCell, setActiveCell] = useState<null | [number, number]>(null);\n\n    const [isNumberPadActive, setIsNumberPadActive] = useState(false);\n    const showNumberPad = () => {\n        setIsNumberPadActive(true);\n    }\n    const hideNumberPad = () => {\n        setIsNumberPadActive(false);\n    }\n\n    function handleCellClick(coords: [number, number], e: React.MouseEvent<HTMLInputElement, MouseEvent>) {\n\n        if (cellClicked === e.target) {\n            isNumberPadActive ? hideNumberPad() : showNumberPad();\n        } else {\n            showNumberPad();\n        }\n        setCellClicked(e.target as HTMLInputElement);\n        setActiveCell(coords);\n        (e.target as HTMLInputElement).select();\n    }\n\n    function handleNumberPadButtonClick(e: React.MouseEvent<HTMLButtonElement>) {\n        const newGridValues = _.cloneDeep(currentGridValues);\n        const row = activeCell !== null ? activeCell[0] : null;\n        const col = activeCell !== null ? activeCell[1] : null;\n        const targetButton = e.target as HTMLButtonElement;\n        let isCorrect = false;\n\n        if (row !== null && col !== null) {\n\n            if (isInGameMode && (targetButton.className === 'clear-button')) {\n                newGridValues[row][col] = setCandidates(currentGridNoIncorrect)[row][col];\n            } else if (!isInGameMode && (targetButton.className === 'clear-button')) {\n                newGridValues[row][col] = [];\n            } else if (targetButton.className === 'solve-button') {\n                newGridValues[row][col] = completedGrid[row][col];\n            } else {\n                newGridValues[row][col] = Number(targetButton.value);\n            }\n    \n            isCorrect = newGridValues[row][col] === completedGrid[row][col];\n\n        }\n        \n        if (isCorrect) {\n            updateGame(setCandidates(newGridValues));\n        } else {\n            updateGame(newGridValues);\n        }\n\n        hideNumberPad();\n        \n    }\n\n    function handleKeyDown(coords: [number, number], e: React.KeyboardEvent<HTMLInputElement>) {\n        const newGridValues = _.cloneDeep(currentGridValues);\n        const row = coords[0];\n        const col = coords[1];\n\n        if (isInGameMode && (e.key === 'Backspace' || e.key === 'Delete')) {\n            newGridValues[row][col] = setCandidates(currentGridNoIncorrect)[row][col];\n        } else if (!isInGameMode && (e.key === 'Backspace' || e.key === 'Delete')) {\n            newGridValues[row][col] = [];\n        } else if (RegExp('[1-9]').test(e.key)) {\n            newGridValues[row][col] = Number(e.key);\n        } else {\n            e.preventDefault();\n        }\n\n        const isCorrect = newGridValues[row][col] === completedGrid[row][col];\n\n        if (isCorrect) {\n            updateGame(setCandidates(newGridValues));\n        } else {\n            updateGame(newGridValues);\n        }\n\n        hideNumberPad();\n\n    }\n\n    function handleCandidateButtonClick(activeCellValue: number | number[] | null, e: React.ChangeEvent<HTMLInputElement>) {\n\n        let newGridValues = _.cloneDeep(currentGridValues);\n        const row = activeCell !== null ? activeCell[0] : null;\n        const col = activeCell !== null ? activeCell[1] : null;\n        const targetButton = e.target as HTMLInputElement;\n        const targetButtonValue = Number(targetButton.value);\n\n        if (row !== null && col !== null) {\n            const cellValue = newGridValues[row][col];\n            const completedGridCellValue = completedGrid[row][col];\n\n            if (Array.isArray(cellValue)) {\n                let newCellValue: number[] = [];\n                if (cellValue.includes(targetButtonValue)) {\n                    newCellValue = cellValue.filter((candidate: number) => candidate !== targetButtonValue);\n                } else {\n                    newCellValue = [...cellValue, targetButtonValue];\n                }\n                newGridValues[row][col] = newCellValue;\n                \n                if (typeof completedGridCellValue === 'number') {\n                    const isCorrect = !cellValue.includes(completedGridCellValue);\n                    if (isCorrect) {\n                        updateGame(setCandidates(newGridValues));\n                    } else {\n                        updateGame(newGridValues);\n                    }\n                }\n\n            }\n\n        }\n\n    }\n\n    function createGrid() {\n        let grid = [];\n    \n        for (let i = 0; i < 9; i++) {\n            for (let j = 0; j < 9; j++) {\n                grid.push(renderCell(i, j));\n            }\n        }\n    \n        return grid;\n    }\n\n    function canCellBeSolved(row: number, col: number) {\n\n        const nextPossibleAnswer = nextPossibleAnswers[row][col];\n\n        if (Array.isArray(nextPossibleAnswer) && nextPossibleAnswer.length === 1) {\n            return true;\n        } else if (Number.isInteger(nextPossibleAnswer)) {\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n\n    function checkIfCorrect(row: number, col: number) {\n\n        const cellValue = currentGridValues[row][col];\n        const completedGridCellValue = completedGrid[row][col];\n\n        if (isInGameMode) {\n            if (Number.isInteger(cellValue) && cellValue !== completedGrid[row][col]) {\n                return true;\n            } else if (Array.isArray(cellValue)\n                && typeof completedGridCellValue === 'number'\n                && !cellValue.includes(completedGridCellValue)\n            ){\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n\n    }\n    \n    function renderCell(i: number, j: number) {\n        return (\n            <Cell\n                key={`r${i}c${j}`}\n                row={i}\n                column={j}\n                value={ showAnswers === true ? completedGrid[i][j] : currentGridValues[i][j] }\n                handleClick={handleCellClick}\n                handleKeyDown={handleKeyDown}\n                isGiven={ Number.isInteger(givens[i][j]) }\n                canBeSolved={ canCellBeSolved(i, j) }\n                isIncorrect={ checkIfCorrect(i, j) }\n                hasCandidate={ Array.isArray(currentGridValues[i][j]) && (currentGridValues[i][j] as number[]).includes(parseInt(highlightCellValue, 10)) }\n                isInGameMode={isInGameMode}\n            />\n        );\n    }\n\n    const gridClassName = `grid${showCandidates === false ? ' hide-candidates' : ''}${highlightGivens === true ? ' highlight-givens' : ''}${(highlightSolvableCells === true && isInGameMode === true ) ? ' highlight-solvable-cells' : ''}${highlightIncorrectCells === true ? ' highlight-incorrect-cells' : ''}`;\n\n    return (\n        <div className=\"grid-wrapper\">\n            <div id=\"grid\" className={gridClassName}>\n                {createGrid()}\n            </div>\n            <NumberPad\n                cellClicked={cellClicked}\n                handleNumberPadButtonClick={handleNumberPadButtonClick}\n                handleCandidateButtonClick={handleCandidateButtonClick}\n                hideNumberPad={hideNumberPad}\n                isNumberPadActive={isNumberPadActive}\n                activeCellValue={ activeCell !== null ? currentGridValues[activeCell[0]][activeCell[1]] : null }\n                completedGridCellValue={ activeCell !== null ? completedGrid[activeCell[0]][activeCell[1]] : null }\n            />\n        </div>\n    );\n}\n\nexport default Grid;","const games = {\n    'easy': [\n        [[[],[],[],[],[],3,1,[],4],[2,6,[],5,[],4,[],[],[]],[[],3,9,[],[],[],8,5,[]],[7,[],3,[],4,6,[],[],[]],[[],[],[],3,[],8,[],[],[]],[[],[],[],7,1,[],4,[],3],[[],4,2,[],[],[],7,3,[]],[[],[],[],4,[],5,[],1,9],[9,[],6,8,[],[],[],[],[]]],\n        [[[],[],4,7,[],[],5,[],6],[[],[],1,[],[],4,[],[],2],[2,[],[],[],1,[],[],[],8],[1,[],9,[],7,3,[],[],[]],[[],6,[],1,[],5,[],2,[]],[[],[],[],6,9,[],7,[],1],[5,[],[],[],2,[],[],[],7],[7,[],[],3,[],[],2,[],[]],[9,[],2,[],[],7,8,[],[]]],\n        [[9,5,[],3,1,[],[],[],[]],[[],[],[],9,[],[],1,[],[]],[[],[],[],[],[],2,9,[],3],[6,[],4,5,[],[],[],[],9],[5,8,[],2,[],1,[],7,6],[1,[],[],[],[],8,3,[],5],[4,[],9,1,[],[],[],[],[]],[[],[],5,[],[],9,[],[],[]],[[],[],[],[],4,3,[],9,2]],\n        [[1,4,[],[],2,[],9,5,[]],[[],[],2,[],[],4,[],[],3],[8,[],[],[],[],[],[],[],2],[[],[],[],8,[],1,5,[],7],[9,[],[],2,[],7,[],[],6],[7,[],8,5,[],6,[],[],[]],[3,[],[],[],[],[],[],[],9],[6,[],[],4,[],[],2,[],[]],[[],8,5,[],7,[],[],6,1]],\n        [[[],[],[],[],4,[],[],[],[]],[3,9,[],[],[],[],4,6,5],[7,[],4,[],[],9,[],2,3],[[],[],[],7,3,1,[],[],2],[[],[],[],4,[],2,[],[],[]],[2,[],[],8,9,5,[],[],[]],[8,2,[],5,[],[],7,[],9],[4,5,7,[],[],[],[],1,8],[[],[],[],[],8,[],[],[],[]]],\n        [[5,[],6,3,4,[],1,[],8],[3,[],9,[],7,[],[],4,[]],[[],[],1,6,[],[],[],[],[]],[7,[],[],[],[],8,[],[],9],[[],[],3,[],[],[],4,[],[]],[6,[],[],4,[],[],[],[],3],[[],[],[],[],[],4,2,[],[]],[[],4,[],[],2,[],8,[],5],[1,[],2,[],5,7,9,[],4]]\n    ],\n    'medium': [\n        [[3,[],[],[],6,[],[],[],[]],[[],1,4,[],[],[],9,[],7],[6,5,[],[],[],7,[],[],[]],[[],8,[],[],2,5,[],[],[]],[1,[],9,[],[],[],6,[],2],[[],[],[],6,9,[],[],8,[]],[[],[],[],4,[],[],[],7,6],[4,[],1,[],[],[],5,9,[]],[[],[],[],[],7,[],[],[],8]],\n        [[[],[],[],[],1,[],[],6,9],[[],[],[],[],[],8,[],3,7],[[],[],[],[],[],[],8,[],[]],[4,[],[],3,2,1,9,[],[]],[[],[],7,[],9,[],5,[],[]],[[],[],2,7,5,6,[],[],3],[[],[],8,[],[],[],[],[],[]],[5,3,[],2,[],[],[],[],[]],[9,2,[],[],4,[],[],[],[]]],\n        [[[],3,[],[],1,8,[],[],[]],[8,[],9,[],3,[],[],7,[]],[[],[],6,[],9,[],3,5,[]],[[],[],[],[],[],7,[],[],6],[[],8,[],[],[],[],[],4,[]],[6,[],[],9,[],[],[],[],[]],[[],5,3,[],6,[],4,[],[]],[[],4,[],[],5,[],8,[],2],[[],[],[],4,7,[],[],3,[]]],\n        [[[],4,[],2,[],[],1,[],[]],[9,7,[],[],3,[],[],6,2],[[],1,2,8,[],[],[],[],[]],[7,[],[],[],[],[],8,[],[]],[[],8,[],[],[],[],[],9,[]],[[],[],9,[],[],[],[],[],7],[[],[],[],[],[],4,6,3,[]],[6,9,[],[],5,[],[],2,1],[[],[],5,[],[],7,[],4,[]]],\n        [[[],[],[],6,[],5,[],[],7],[5,[],[],[],9,[],[],[],6],[[],7,[],3,[],[],4,9,[]],[[],[],[],[],[],[],5,[],8],[[],[],[],2,8,4,[],[],[]],[1,[],6,[],[],[],[],[],[]],[[],1,4,[],[],3,[],6,[]],[2,[],[],[],7,[],[],[],3],[9,[],[],8,[],1,[],[],[]]]\n    ],\n    'hard': [\n        [[[],7,[],[],[],[],[],[],[]],[[],[],[],[],[],[],8,[],[]],[2,[],6,[],9,1,4,[],[]],[[],[],[],9,[],[],[],6,[]],[[],1,5,[],[],7,[],4,[]],[[],8,[],[],5,[],[],9,[]],[[],3,[],4,[],[],[],[],[]],[[],[],8,[],6,[],7,[],[]],[7,[],[],[],3,[],[],1,9]],\n        [[5,[],3,7,6,[],[],[],[]],[[],2,6,[],[],[],7,[],[]],[[],[],[],1,[],[],[],8,[]],[7,[],[],[],4,[],[],[],1],[[],[],4,[],[],[],[],[],6],[[],1,[],[],[],6,[],7,3],[9,[],[],[],[],[],[],[],8],[[],[],[],[],[],5,[],[],[]],[[],[],[],6,[],3,1,9,[]]],\n        [[[],6,[],[],[],5,[],[],[]],[[],7,[],[],[],[],[],[],1],[[],[],[],[],6,3,4,[],[]],[[],[],3,[],8,[],[],[],[]],[2,1,[],[],9,[],[],[],5],[4,[],[],[],[],7,8,[],[]],[[],[],1,6,[],[],[],8,4],[[],[],[],[],[],[],[],5,[]],[8,[],[],[],4,[],6,1,[]]],\n        [[[],[],5,7,[],[],[],[],[]],[[],[],7,[],[],9,6,[],8],[[],8,[],[],[],2,[],1,[]],[[],3,[],[],[],[],[],[],[]],[5,[],[],2,6,1,[],7,[]],[[],[],[],8,[],[],1,[],9],[[],[],[],1,[],[],[],[],3],[3,[],9,[],2,[],[],8,[]],[[],[],[],[],4,[],[],[],[]]],\n        [[[],3,[],[],[],5,[],[],[]],[5,1,[],[],3,[],8,[],7],[[],[],[],4,[],[],[],[],1],[[],6,[],2,[],[],[],1,[]],[[],[],1,[],[],[],7,[],[]],[[],9,[],[],[],1,[],4,[]],[4,[],[],[],[],9,[],[],[]],[1,[],9,[],8,[],[],7,5],[[],[],[],3,[],[],[],8,[]]],\n        [[[],[],[],[],[],8,[],7,[]],[[],[],5,[],6,9,[],[],[]],[[],[],[],[],[],5,8,9,2],[[],[],1,6,[],[],[],3,[]],[4,[],[],[],[],[],[],[],1],[[],9,[],[],[],1,4,[],[]],[7,4,3,9,[],[],[],[],[]],[[],[],[],4,2,[],3,[],[]],[[],8,[],5,[],[],[],[],[]]],\n        [[[],[],2,1,8,6,[],[],[]],[[],[],[],[],[],[],2,[],[]],[[],3,[],9,[],[],[],[],[]],[2,[],3,6,[],[],8,9,[]],[4,[],[],[],5,[],[],[],1],[[],6,8,[],[],2,7,[],5],[[],[],[],[],[],9,[],5,[]],[[],[],4,[],[],[],[],[],[]],[[],[],[],3,6,7,9,[],[]]],\n        [[6,[],[],[],9,2,[],[],[]],[[],[],8,5,[],6,[],[],2],[3,[],[],4,[],[],[],[],[]],[2,[],4,[],[],[],[],8,[]],[[],[],5,[],[],[],[],[],1],[[],[],[],9,[],[],6,[],5],[[],[],[],[],1,[],3,[],[]],[4,[],[],[],[],[],[],9,[]],[[],1,[],7,8,[],[],[],6]],\n        [[9,6,[],[],1,[],[],[],3],[3,1,[],[],8,[],2,[],[]],[[],[],[],[],[],[],8,[],[]],[[],4,9,[],[],6,[],[],[]],[1,[],[],[],9,8,[],[],[]],[[],[],6,5,[],[],[],3,7],[[],3,[],[],[],[],[],2,6],[[],9,[],1,[],[],[],[],[]],[[],7,4,[],2,5,[],9,[]]],\n        [[6,[],[],[],[],[],[],3,[]],[[],[],1,[],[],[],5,[],7],[[],7,[],2,[],4,[],8,[]],[7,[],2,4,[],6,[],[],[]],[[],[],[],[],[],[],3,[],[]],[9,1,[],[],[],[],2,7,4],[[],6,7,8,9,[],1,4,3],[1,4,[],[],3,[],[],9,[]],[[],[],[],[],4,[],[],[],2]]\n    ],\n    'expert': [\n        [[[],[],[],9,[],2,[],[],5],[[],[],[],[],[],5,1,3,[]],[[],[],9,[],[],[],[],2,[]],[[],5,3,[],[],[],[],[],6],[4,[],[],[],8,[],[],[],1],[9,[],[],[],[],[],4,7,[]],[[],6,[],[],[],[],7,[],[]],[[],9,1,4,[],[],[],[],[]],[8,[],[],5,[],7,[],[],[]]],\n        [[[],[],[],9,[],2,[],[],5],[[],[],[],[],[],5,1,3,[]],[[],[],9,[],[],[],[],2,[]],[[],5,3,[],[],[],[],[],6],[4,[],[],[],8,[],[],[],1],[9,[],[],[],[],[],4,7,[]],[[],6,[],[],[],[],7,[],[]],[[],9,1,4,[],[],[],[],[]],[8,[],[],5,[],7,[],[],[]]],\n        [[[],[],[],8,[],[],[],1,[]],[[],[],[],2,[],[],8,9,6],[[],[],[],[],6,[],[],[],2],[2,[],[],[],[],[],3,[],[]],[[],[],8,3,[],1,4,[],[]],[[],[],7,[],[],[],[],[],9],[6,[],[],[],7,[],[],[],[]],[9,7,2,[],[],3,[],[],[]],[[],3,[],[],[],4,[],[],[]]],\n        [[[],9,1,[],[],[],[],[],5],[[],[],[],[],9,4,3,[],[]],[[],3,[],6,[],[],[],[],[]],[[],[],[],[],[],[],[],7,9],[2,[],[],1,[],7,[],[],6],[8,5,[],[],[],[],[],[],[]],[[],[],[],[],[],1,[],5,[]],[[],[],2,4,3,[],[],[],[]],[5,[],[],[],[],[],2,4,[]]],\n        [[[],[],[],[],[],1,[],[],[]],[[],6,[],[],[],[],4,[],[]],[[],9,[],5,3,[],[],[],8],[[],4,[],[],5,3,[],[],7],[[],8,[],[],[],[],[],5,[]],[7,[],[],1,2,[],[],6,[]],[8,[],[],[],1,6,[],2,[]],[[],[],5,[],[],[],[],9,[]],[[],[],[],8,[],[],[],[],[]]],\n        [[[],[],[],[],[],7,3,[],[]],[[],7,[],[],8,[],5,[],9],[6,[],1,[],[],[],[],[],7],[[],[],5,[],[],6,[],9,[]],[[],[],[],[],4,[],[],[],[]],[[],6,[],5,[],[],2,[],[]],[2,[],[],[],[],[],9,[],1],[1,[],9,[],5,[],[],7,[]],[[],[],3,8,[],[],[],[],[]]],\n        [[3,[],[],[],[],2,[],[],6],[[],[],[],[],[],[],[],[],[]],[[],[],[],6,4,[],7,3,5],[[],1,[],[],2,[],[],6,[]],[6,[],[],4,[],7,[],[],1],[[],9,[],[],3,[],[],2,[]],[5,2,3,[],6,1,[],[],[]],[[],[],[],[],[],[],[],[],[]],[7,[],[],5,[],[],[],[],2]],\n        [[7,[],[],1,4,[],[],[],9],[1,[],[],2,[],[],[],4,[]],[[],5,[],[],3,[],[],[],[]],[[],[],[],[],2,[],1,[],4],[[],[],6,[],7,[],8,[],[]],[5,[],1,[],9,[],[],[],[]],[[],[],[],[],5,[],[],6,[]],[[],3,[],[],[],4,[],[],7],[2,[],[],[],8,6,[],[],1]],\n        [[[],[],[],[],5,4,3,8,[]],[[],[],5,9,8,[],[],[],2],[[],8,[],[],3,[],[],[],[]],[5,[],[],6,[],[],[],7,[]],[3,[],4,[],7,[],2,[],9],[[],7,[],[],[],9,[],[],1],[[],[],[],[],1,[],[],2,[]],[7,[],[],[],9,3,6,[],[]],[[],5,1,7,6,[],[],[],[]]],\n        [[[],[],[],[],[],[],6,8,[]],[[],[],[],[],7,3,[],[],9],[3,[],9,[],[],[],[],4,5],[4,9,[],[],[],[],[],[],[]],[8,[],3,[],5,[],9,[],2],[[],[],[],[],[],[],[],3,6],[9,6,[],[],[],[],3,[],8],[7,[],[],6,8,[],[],[],[]],[[],2,8,[],[],[],[],[],[]]],\n        [[6,[],[],1,7,[],[],[],5],[[],[],[],[],4,[],[],2,[]],[[],[],[],[],[],[],8,9,[]],[[],3,7,8,[],[],[],[],2],[5,[],[],[],[],1,[],[],9],[[],[],2,[],[],[],[],[],[]],[[],[],5,[],2,4,[],[],[]],[[],[],[],[],1,[],6,[],[]],[7,[],[],3,[],[],[],[],[]]],\n        [[[],[],[],1,[],[],6,[],3],[[],8,7,[],4,[],[],[],5],[9,[],3,[],[],[],[],[],[]],[[],[],5,[],[],6,[],[],[]],[7,[],[],[],[],1,[],[],[]],[[],9,[],[],[],3,[],5,[]],[1,6,[],[],[],[],[],[],[]],[5,[],[],[],[],[],7,[],4],[[],[],[],[],8,[],[],[],2]],\n        [[[],[],[],6,[],[],[],8,[]],[[],[],2,[],[],5,[],4,[]],[[],[],3,[],2,[],[],1,[]],[[],2,6,[],[],7,1,[],[]],[9,[],[],[],[],[],[],[],5],[[],[],4,9,[],[],2,7,[]],[[],1,[],[],5,[],3,[],[]],[[],6,[],3,[],[],8,[],[]],[[],9,[],[],[],1,[],[],[]]],\n        [[[],[],[],3,[],[],6,5,[]],[[],[],1,[],2,[],[],8,[]],[5,3,[],6,9,[],[],1,[]],[[],[],5,[],[],2,1,3,[]],[[],[],[],9,5,[],2,4,[]],[7,[],[],[],[],[],8,[],[]],[[],[],7,8,[],[],5,[],3],[8,[],[],[],3,[],[],7,[]],[2,4,3,[],1,7,[],6,[]]]\n    ]\n}\n\nexport default games;","import { useState } from 'react';\nimport games from './games';\n\nfunction getRandomInt(max: number) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\ntype GridArr = (number | number[])[][];\n\ninterface NewGamePanelProps {\n    createNewGame: (initialGrid: GridArr) => void;\n    createCustomGame: () => void;\n    toggleMenu: () => void;\n}\n\nfunction NewGamePanel(props: NewGamePanelProps) {\n\n    const [difficultyLevel, setDifficultyLevel] = useState('Easy');\n    const {createNewGame, createCustomGame, toggleMenu} = props;\n\n    function generateGame() {\n        if (difficultyLevel === 'Easy') {\n            createNewGame(\n                games.easy[getRandomInt(games.easy.length)]\n            );\n        }\n        if (difficultyLevel === 'Medium') {\n            createNewGame(\n                games.medium[getRandomInt(games.medium.length)]\n            );\n        }\n        if (difficultyLevel === 'Hard') {\n            createNewGame(\n                games.hard[getRandomInt(games.hard.length)]\n            );\n        }\n        if (difficultyLevel === 'Expert') {\n            createNewGame(\n                games.expert[getRandomInt(games.expert.length)]\n            );\n        }\n    }\n\n    return (\n        <div className=\"new-game-panel\">\n            <div className=\"form-group\">\n                <label htmlFor=\"difficulty-selector\">Difficulty: </label>\n                <select\n                    id=\"difficulty-selector\"\n                    className=\"form-control\"\n                    value={difficultyLevel}\n                    onChange={(e) => {\n                        setDifficultyLevel(e.target.value);\n                    }}\n                >\n                    <option value=\"Easy\">Easy</option>\n                    <option value=\"Medium\">Medium</option>\n                    <option value=\"Hard\">Hard</option>\n                    <option value=\"Expert\">Expert</option>\n                </select>\n            </div>\n            <button className=\"btn btn-block btn-primary\" onClick={() => {\n                generateGame();\n                toggleMenu();\n            }}>\n                Generate Game\n            </button>\n            <button className=\"btn btn-block btn-primary\" onClick={() => {\n                createCustomGame();\n                toggleMenu();\n            }}>\n                Create Custom Game\n            </button>\n        </div>\n    );\n}\n\nexport default NewGamePanel;","interface GameSettingsPanelProps {\n    showCandidates: boolean;\n    setShowCandidates: React.Dispatch<React.SetStateAction<boolean>>;\n    highlightGivens: boolean;\n    setHighlightGivens: React.Dispatch<React.SetStateAction<boolean>>;\n    highlightSolvableCells: boolean;\n    setHighlightSolvableCells: React.Dispatch<React.SetStateAction<boolean>>;\n    highlightIncorrectCells: boolean;\n    setHighlightIncorrectCells: React.Dispatch<React.SetStateAction<boolean>>;\n    darkMode: boolean;\n    setDarkMode: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction GameSettingsPanel(props: GameSettingsPanelProps) {\n\n    const {\n        showCandidates, setShowCandidates,\n        highlightGivens, setHighlightGivens,\n        highlightSolvableCells, setHighlightSolvableCells,\n        highlightIncorrectCells, setHighlightIncorrectCells,\n        darkMode, setDarkMode\n    } = props;\n\n    return (\n        <div className=\"game-settings\">\n            <div className=\"form-group form-check\">\n                <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"show-candidates\"\n                    name=\"show-candidates\"\n                    checked={showCandidates}\n                    onChange={(e) => {\n                        setShowCandidates(e.target.checked);\n                    }}\n                />\n                <label htmlFor=\"show-candidates\" className=\"form-check-label\">\n                    Show Candidates\n                </label>\n            </div>\n            <div className=\"form-group form-check\">\n                <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"highlight-givens\"\n                    name=\"highlight-givens\"\n                    checked={highlightGivens}\n                    onChange={(e) => {\n                        setHighlightGivens(e.target.checked);\n                    }}\n                />\n                <label htmlFor=\"highlight-givens\" className=\"form-check-label\">\n                    Highlight Givens\n                </label>\n            </div>\n            <div className=\"form-group form-check\">\n                <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"highlight-solvable\"\n                    name=\"highlight-solvable\"\n                    checked={highlightSolvableCells}\n                    onChange={(e) => {\n                        setHighlightSolvableCells(e.target.checked);\n                    }}\n                />\n                <label htmlFor=\"highlight-solvable\" className=\"form-check-label\">\n                    Highlight Solvable Cells\n                </label>\n            </div>\n            <div className=\"form-group form-check\">\n                <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"highlight-incorrect-cells\"\n                    name=\"highlight-incorrect-cells\"\n                    checked={highlightIncorrectCells}\n                    onChange={(e) => {\n                        setHighlightIncorrectCells(e.target.checked);\n                    }}\n                />\n                <label htmlFor=\"highlight-incorrect-cells\" className=\"form-check-label\">\n                    Highlight Incorrect Cells\n                </label>\n            </div>\n            <div className=\"form-group form-check\">\n                <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"dark-mode\"\n                    name=\"dark-mode\"\n                    checked={darkMode}\n                    onChange={(e) => {\n                        setDarkMode(e.target.checked);\n                    }}\n                />\n                <label htmlFor=\"dark-mode\" className=\"form-check-label\">\n                    Dark Mode\n                </label>\n            </div>\n        </div>\n    );\n}\n\nexport default GameSettingsPanel;","import './History.css';\n\ntype GridArr = (number | number[])[][];\n\ninterface HistoryObj {\n    grid: GridArr;\n}\n\ninterface HistoryProps {\n    history: HistoryObj[];\n    jumpToStepInHistory: (step:number) => void;\n    currentStep: number;\n    heading: string;\n}\n\nfunction History(props: HistoryProps) {\n\n    const {history, jumpToStepInHistory, currentStep, heading} = props;\n\n    const historyLength = history.length;\n\n    // Previous Button\n    const previousButtonAttrs = {\n        onClick: () => jumpToStepInHistory(currentStep - 1),\n        disabled: false,\n        className: 'btn btn-primary'\n    }\n    if (currentStep === 0) {\n        previousButtonAttrs.disabled = true;\n    }\n\n    // Next Button\n    const nextButtonAttrs = {\n        onClick: () => jumpToStepInHistory(currentStep + 1),\n        disabled: false,\n        className: 'btn btn-primary'\n    }\n    if (historyLength - 1 === currentStep) {\n        nextButtonAttrs.disabled = true;\n    }\n\n    function handleCurrentStepClick(event: React.MouseEvent<HTMLInputElement, MouseEvent>) {\n        event.currentTarget.select();\n    }\n\n    function handleCurrentStepKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {\n        if (event.key === 'Backspace' || event.key === 'Delete') {\n            event.currentTarget.select();\n            event.preventDefault();\n        }\n    }\n\n    function handleCurrentStepChange(event: React.FormEvent<HTMLInputElement>) {\n        const value = parseInt(event.currentTarget.value, 10);\n        jumpToStepInHistory(value);\n    }\n\n    return (\n        <div className=\"history\">\n            <h2 className=\"text-center\">{heading}</h2>\n            <div className=\"history-nav d-flex justify-content-center\">\n                <button {...previousButtonAttrs}><svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"caret-left\" className=\"svg-inline--fa fa-caret-left fa-w-6\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\"><path fill=\"currentColor\" d=\"M192 127.338v257.324c0 17.818-21.543 26.741-34.142 14.142L29.196 270.142c-7.81-7.81-7.81-20.474 0-28.284l128.662-128.662c12.599-12.6 34.142-3.676 34.142 14.142z\"></path></svg><span className=\"sr-only\">Previous Step</span></button>\n                    <span className=\"history-current-step\">\n                        <label htmlFor=\"current-step\" className=\"sr-only\">Current Step</label>\n                        <input className=\"form-control\" id=\"current-step\" name=\"current-step\" type=\"text\" value={currentStep} onChange={handleCurrentStepChange} onClick={handleCurrentStepClick} onKeyDown={handleCurrentStepKeyDown} />&nbsp;/&nbsp;{historyLength - 1}\n                    </span>\n                <button {...nextButtonAttrs}><svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"caret-right\" className=\"svg-inline--fa fa-caret-right fa-w-6\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\"><path fill=\"currentColor\" d=\"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z\"></path></svg><span className=\"sr-only\">Next Step</span></button>\n            </div>\n        </div>\n    );\n}\n\nexport default History;","import './HighlightCellOptions.css';\n\ninterface HighlightCellOptionsProps {\n    highlightCellValue: string;\n    setHighlightCellValue: React.Dispatch<React.SetStateAction<string>>;\n}\n\nfunction HighlightCellOptions(props: HighlightCellOptionsProps) {\n\n    const {highlightCellValue, setHighlightCellValue} = props;\n\n    return (\n        <div className=\"highlight-cell-options\">\n            <h2 className=\"text-center\">Highlight Cells</h2>\n            <div className=\"form-inline justify-content-center\">\n                <label htmlFor=\"highlight-cell-selector\" className=\"mr-2\">Show me the: </label>\n                <select\n                    id=\"highlight-cell-selector\"\n                    className=\"form-control\"\n                    value={highlightCellValue}\n                    onChange={(e) => {\n                        setHighlightCellValue(e.target.value);\n                    }}\n                >\n                    <option value=\"off\">Select</option>\n                    <option value=\"1\">Ones</option>\n                    <option value=\"2\">Twos</option>\n                    <option value=\"3\">Threes</option>\n                    <option value=\"4\">Fours</option>\n                    <option value=\"5\">Fives</option>\n                    <option value=\"6\">Sixes</option>\n                    <option value=\"7\">Sevens</option>\n                    <option value=\"8\">Eights</option>\n                    <option value=\"9\">Nines</option>\n                </select>\n            </div>\n        </div>\n    );\n}\n\nexport default HighlightCellOptions;","import React, { useState, useEffect } from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Grid from './Grid';\nimport NewGamePanel from './NewGamePanel';\nimport GameSettingsPanel from './GameSettingsPanel';\nimport History from './History';\nimport HighlightCellOptions from './HighlightCellOptions';\nimport {\n    setCandidates,\n    verifyCompletedGrid,\n    getGridAnswers,\n    getGridNextAnswers,\n    getDiffOfCompletedCells,\n} from './logic';\nimport _ from 'lodash';\n\ntype GridArr = (number | number[])[][];\n\ninterface HistoryObj {\n    grid: GridArr;\n}\n\nfunction App() {\n    function generateEmptyBoard() {\n        const emptyBoard: GridArr = [];\n        for (let i = 0; i < 9; i++) {\n            emptyBoard.push(Array(9).fill([]));\n        }\n        return emptyBoard;\n    }\n\n    function isGridFull(currentGridValues: GridArr) {\n        const currentGridValuesFlat = currentGridValues.flat();\n        return currentGridValuesFlat.every((value) => Number.isInteger(value));\n    }\n\n    function checkCompletedGrid(grid: GridArr) {\n        if (isGridFull(grid) === true) {\n            if (_.isEqual(grid, completedGrid)) {\n                if (verifyCompletedGrid(grid) === true) {\n                    alert('Congrats! Sudoku game completed successfully!');\n                }\n            } else {\n                alert(\"Sorry, some numbers aren't where they should be.\");\n            }\n        }\n    }\n\n    /*  Force Update */\n    /*const [, forceUpdate] = useReducer(x => x + 1, 0);*/\n\n    /* History */\n    const historyJson = localStorage.getItem('sudokuHistory');\n    const [history, setHistory] = useState<HistoryObj[]>(\n        historyJson !== null\n            ? JSON.parse(historyJson)\n            : [{ grid: generateEmptyBoard() }]\n    );\n    useEffect(() => {\n        localStorage.setItem('sudokuHistory', JSON.stringify(history));\n    }, [history]);\n\n    /* Step Number */\n    const stepNumberJson = localStorage.getItem('sudokuStepNumber');\n    const [stepNumber, setStepNumber] = useState<number>(\n        stepNumberJson !== null ? JSON.parse(stepNumberJson) : 0\n    );\n    useEffect(() => {\n        localStorage.setItem('sudokuStepNumber', JSON.stringify(stepNumber));\n    }, [stepNumber]);\n\n    /* Setting - Show Candidates */\n    const showCandidatesJson = localStorage.getItem('sudokuShowCandidates');\n    const [showCandidates, setShowCandidates] = useState<boolean>(\n        showCandidatesJson !== null ? JSON.parse(showCandidatesJson) : false\n    );\n    useEffect(() => {\n        localStorage.setItem('sudokuShowCandidates', JSON.stringify(showCandidates));\n    }, [showCandidates]);\n\n    /* Setting - Highlight Givens */\n    const highlightGivensJson = localStorage.getItem('sudokuHighlightGivens');\n    const [highlightGivens, setHighlightGivens] = useState<boolean>(\n        highlightGivensJson !== null ? JSON.parse(highlightGivensJson) : true\n    );\n    useEffect(() => {\n        localStorage.setItem('sudokuHighlightGivens', JSON.stringify(highlightGivens));\n    }, [highlightGivens]);\n\n    /* Setting - Highlight Solvable Cells */\n    const highlightSolvableCellsJson = localStorage.getItem('sudokuHighlightSolvableCells');\n    const [highlightSolvableCells, setHighlightSolvableCells] = useState<boolean>(\n        highlightSolvableCellsJson !== null\n            ? JSON.parse(highlightSolvableCellsJson)\n            : true\n    );\n    useEffect(() => {\n        localStorage.setItem('sudokuHighlightSolvableCells', JSON.stringify(highlightSolvableCells));\n    }, [highlightSolvableCells]);\n\n    /* Setting - Highlight Incorrect Cells */\n    const highlightIncorrectCellsJson = localStorage.getItem(\n        'sudokuHighlightIncorrectCells'\n    );\n    const [\n        highlightIncorrectCells,\n        setHighlightIncorrectCells,\n    ] = useState<boolean>(\n        highlightIncorrectCellsJson !== null\n            ? JSON.parse(highlightIncorrectCellsJson)\n            : true\n    );\n    useEffect(() => {\n        localStorage.setItem('sudokuHighlightIncorrectCells', JSON.stringify(highlightIncorrectCells));\n    }, [highlightIncorrectCells]);\n\n    /* Setting - Dark Mode */\n    const darkModeJson = localStorage.getItem('sudokuDarkMode');\n    const [darkMode, setDarkMode] = useState<boolean>(\n        darkModeJson !== null\n            ? JSON.parse(darkModeJson)\n            : window.matchMedia('(prefers-color-scheme: dark)').matches\n    );\n    useEffect(() => {\n        localStorage.setItem('sudokuDarkMode', JSON.stringify(darkMode));\n    }, [darkMode]);\n\n    if (darkMode) {\n        document.body.classList.add('dark-mode');\n    } else {\n        document.body.classList.remove('dark-mode');\n    }\n\n    const [isInGameMode, setIsInGameMode] = useState(true);\n\n    const [showAnswers, setShowAnswers] = useState(false);\n    function toggleShowAnswers() {\n        setShowAnswers(!showAnswers);\n    }\n\n    const [menuIsOpen, setMenuIsOpen] = useState(false);\n    function closeMenu() {\n        setMenuIsOpen(false);\n    }\n\n    function toggleMenu() {\n        setMenuIsOpen(!menuIsOpen);\n    }\n\n    /*const [completedGrid, setCompletedGrid] = useState(isInGameMode\n        ? getGridAnswers(history[0].grid)\n        : generateEmptyBoard());*/\n\n    let completedGrid = isInGameMode\n        ? getGridAnswers(history[0].grid)\n        : generateEmptyBoard();\n\n    const prevHistory = _.cloneDeep(history);\n    const addHistory = (newHistory: HistoryObj) =>\n        setHistory([...prevHistory, newHistory]);\n    const initialGrid = history[0].grid;\n    const currentGridValues = history[stepNumber].grid;\n\n    const currentGridNoIncorrect = _.cloneDeep(currentGridValues).map(\n        (row, i) =>\n            row.map((cell, j) => {\n\n                const currentGridCellValue = currentGridValues[i][j];\n                const completedGridCellValue = completedGrid[i][j];\n\n                // merge current grid and initial grid to remove any incorrect values\n                if (typeof currentGridCellValue === 'number') {\n                    if (currentGridCellValue === completedGridCellValue) {\n                        // correct number\n                        return currentGridCellValue;\n                    } else {\n                        // incorrect number, reset to candidates in initial grid\n                        return initialGrid[i][j];\n                    }\n                }\n                if (Array.isArray(currentGridCellValue)) {\n                    if (typeof completedGridCellValue === 'number' && currentGridCellValue.includes(completedGridCellValue)) {\n                        // correct candidates\n                        return currentGridCellValue;\n                    } else {\n                        // incorrect candidates, reset to candidates in initial grid\n                        return initialGrid[i][j];\n                    }\n                }\n                // keep value of current candidates\n                return currentGridCellValue;\n                \n            })\n    );\n\n    const nextGridValues = getGridNextAnswers(currentGridNoIncorrect);\n    const nextPossibleAnswers = getDiffOfCompletedCells(\n        currentGridNoIncorrect,\n        nextGridValues\n    );\n\n    const [highlightCellValue, setHighlightCellValue] = useState('off');\n\n    function updateGame(updatedGrid: GridArr) {\n        if (isInGameMode) {\n            addHistory({\n                grid: updatedGrid,\n            });\n            setStepNumber(history.length);\n        } else {\n            setHistory([\n                {\n                    grid: updatedGrid,\n                },\n            ]);\n        }\n        checkCompletedGrid(updatedGrid);\n    }\n\n    function jumpToStepInHistory(step: number) {\n        if (step >= 0 && step <= (history.length - 1)) {\n            setStepNumber(step);\n        }\n    }\n\n    function createCustomGame() {\n        setHistory([{ grid: generateEmptyBoard() }]);\n        setStepNumber(0);\n        setIsInGameMode(false);\n    }\n\n    function createNewGame(initialGrid: GridArr) {\n        setHistory([{ grid: setCandidates(initialGrid) }]);\n        setStepNumber(0);\n        setIsInGameMode(true);\n    }\n\n    return (\n        <div className=\"app-wrapper\" onClick={() => { closeMenu() }}>\n            <Dropdown\n                id=\"dropdown-game-menu\"\n                className=\"text-right\"\n                show={menuIsOpen}\n            >\n                <h2>Menu</h2>\n                <Dropdown.Toggle\n                    variant=\"primary\"\n                    id=\"game-menu\"\n                    onClick={(e: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\n                        e.stopPropagation()\n                        toggleMenu();\n                    }}\n                >\n                    <span className=\"sr-only\">Menu</span>\n                    <span className=\"navbar-toggler-icon\"></span>\n                </Dropdown.Toggle>\n                <Dropdown.Menu className=\"p-4\" onClick={(e: React.MouseEvent<HTMLInputElement, MouseEvent>) => { e.stopPropagation() }}>\n                    <h2>Start a New Game</h2>\n                    <NewGamePanel\n                        createNewGame={createNewGame}\n                        createCustomGame={createCustomGame}\n                        toggleMenu={toggleMenu}\n                    />\n                    <Dropdown.Divider />\n                    <h2>Settings</h2>\n                    <GameSettingsPanel\n                        showCandidates={showCandidates}\n                        setShowCandidates={setShowCandidates}\n                        highlightGivens={highlightGivens}\n                        setHighlightGivens={setHighlightGivens}\n                        highlightSolvableCells={highlightSolvableCells}\n                        setHighlightSolvableCells={setHighlightSolvableCells}\n                        highlightIncorrectCells={highlightIncorrectCells}\n                        setHighlightIncorrectCells={setHighlightIncorrectCells}\n                        darkMode={darkMode}\n                        setDarkMode={setDarkMode}\n                    />\n                    <Dropdown.Divider />\n                    <button\n                        className=\"btn btn-block btn-primary\"\n                        onClick={() => {\n                            toggleMenu();\n                            toggleShowAnswers();\n                        }}\n                    >\n                        { showAnswers === true ? 'Hide Answers' : 'Show Answers' }\n                    </button>\n                </Dropdown.Menu>\n            </Dropdown>\n\n            <div\n                className={\n                    isInGameMode === true\n                        ? 'custom-game-instructions d-none'\n                        : 'custom-game-instructions'\n                }\n            >\n                <p>\n                    Enter your starting numbers (\"givens\") in the cells to\n                    create your own game. When you have finished entering all\n                    the givens, click \"Start Game\" to start solving the puzzle.\n                </p>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                        createNewGame(currentGridValues);\n                    }}\n                >\n                    Start Game\n                </button>\n            </div>\n\n            <Grid\n                currentGridValues={currentGridValues}\n                currentGridNoIncorrect={currentGridNoIncorrect}\n                completedGrid={completedGrid}\n                updateGame={updateGame}\n                givens={history[0].grid}\n                highlightGivens={highlightGivens}\n                highlightSolvableCells={highlightSolvableCells}\n                highlightIncorrectCells={highlightIncorrectCells}\n                highlightCellValue={highlightCellValue}\n                showCandidates={showCandidates}\n                nextPossibleAnswers={nextPossibleAnswers}\n                isInGameMode={isInGameMode}\n                showAnswers={showAnswers}\n            />\n\n            <HighlightCellOptions\n                highlightCellValue={highlightCellValue}\n                setHighlightCellValue={setHighlightCellValue}\n            />\n\n            <History\n                history={history}\n                jumpToStepInHistory={jumpToStepInHistory}\n                currentStep={stepNumber}\n                heading=\"Game History\"\n            />\n\n            {/*<button onClick={() => { setCompletedGrid(getGridAnswers(currentGridValues)) }}>Get Grid Answers</button>*/}\n\n        </div>\n    );\n    \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}